qualifier {x == y, x != y, x in uelems xs}

measure len :: List a -> {Int | _v >= 0}
measure elems :: List a -> Set a

data List a decreases len where
	Nil :: {List a | len _v == 0 && elems _v == []}
	Cons :: x: a -> xs: List a -> {List a | len _v == len xs + 1 && elems _v == elems xs + [x]}

measure ulen :: UList a -> {Int | _v >= 0}
measure uelems :: UList a -> Set a

data UList a decreases ulen where
	UNil :: {UList a | ulen _v == 0 && uelems _v == []}
	UCons :: x: a -> xs: UList {a | x != _v} -> {UList a | ulen _v == ulen xs + 1 && uelems _v == uelems xs + [x]}
	
strengthen :: x: a -> xs: {UList a | !(x in uelems _v)} -> {UList {a | _v != x} | uelems _v == uelems xs && ulen _v == ulen xs}
strengthen = ??
	
nub' :: xs: List a -> acc: UList a -> {UList a | uelems _v == uelems acc + elems xs}
nub' = ??