measure fst :: Pair a b -> a
measure snd :: Pair a b -> b

data Pair a b where
	Pair :: x: a -> y: b -> {Pair a b | fst _v == x && snd _v == y}

measure len :: List a -> {Int | _v >= 0}
measure elems :: List a -> Set a

data List a decreases len where
	Nil :: {List a | len _v == 0 && elems _v == []}
	Cons :: x: a -> xs: List a -> {List a | len _v == len xs + 1 && elems _v == elems xs + [x]}

measure ilen :: IList a -> {Int | _v >= 0}
measure ielems :: IList a -> Set a

data IList a decreases ilen where
	INil :: {IList a | ilen _v == 0 && ielems _v == []}
	ICons :: x: a -> xs: IList {a | x <= _v} -> {IList a | ilen _v == ilen xs + 1 && ielems _v == ielems xs + [x]}
		
partition :: p: a -> xs: List a -> {Pair {List {a | _v <= p} | len _v >= 0} {List {a | _v > p} | len _v >= 0} | len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs }
pivotAppend :: p: a -> xs: IList {a | _v <= p} -> ys: IList {a | _v > p} -> {IList a | ilen _v == ilen xs + ilen ys + 1 && ielems _v == ielems xs + ielems ys + [p] }

quickSort :: xs: List a -> {IList a | ilen _v == len xs && ielems _v == elems xs }
quickSort = ??


	
