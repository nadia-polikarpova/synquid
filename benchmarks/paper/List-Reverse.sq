measure len :: List a -> {Int | _v >= 0}
measure elems :: List a -> Set a

data List a <P :: a -> a -> Bool> decreases len where
	Nil :: {List a <P> | len _v == 0 && elems _v == []}
	Cons :: x: a -> xs: List {a | P x _v} <P> -> {List a <P> | len _v == len xs + 1 && elems _v == elems xs + [x]}
	
snoc :: <P :: a -> a -> Bool> . x: a -> xs: List {a | P _v x} <P> -> {List a <P> | len _v == len xs + 1}
snoc = ??

reverse :: <P :: a -> a -> Bool> . xs: List a <P> -> {List a <{P _1 _0}> | len _v == len xs}
reverse = ??
	
