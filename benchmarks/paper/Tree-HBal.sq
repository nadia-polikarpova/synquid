qualifier {h == 0}

measure size :: Tree a -> {Int | _v >= 0}
measure height :: Tree a -> {Int | _v >= 0}

data Tree a decreases size where
	Empty :: {Tree a | size _v == 0 && height _v == 0}
	Node :: l: Tree a -> r: { Tree a | height l == height _v } -> {Tree a | size _v == size l + size r + 1 && height _v == height l + 1}

--div1 :: n: Int -> { Int | _v * 2 >= n && _v * 2 <= n + 1 }
--minus :: a: Int -> b: Int -> { Int | _v == a - b }
dec :: a: Int -> { Int | _v == a - 1 }
zero :: { Int | _v == 0 }
--power :: n: { Int | _v >= 0 } -> { Int | _v ==  }

hbal :: h: { Int | _v >= 0 } -> {Tree a | height _v == h }
hbal = ??


