{- module Authentication -}

-- | User IDs
type UId = Int

-- | Passwords
data Password

-- | Principals
data Principal where
  Admin :: (Principal)
  User :: UId -> (Principal)
  
-- | Is principal authenticated?  
predicate IsAuth :: Principal -> Bool

-- | Constructor for @IsAuth@: checks @pw@ validity and authenticates @p@
login :: p: Principal -> pw: Password -> { Bool | _v == IsAuth p }

{- module FileRM -}

-- | File handles
data File

measure canRead :: File -> Set Principal
measure canWrite :: File -> Set Principal

-- | Access permission "axioms" (constructors for @CanRead@ and @CanWrite@)
wImpliesR :: p: Principal -> f: {File | p in canWrite _v} -> {File | _v == f && p in canRead _v}
adminW :: f: File -> {File | _v == f && Admin in canWrite _v}

-- | File content
data Content

data Label where
  F :: File -> (Label)
  J :: Label -> Label -> Label
  
predicate Tracked :: Content -> Label -> Bool

strcatFlow :: c1: Content -> l1: {Label | Tracked c1 _v} -> c2: Content ->  l2: {Label | Tracked c2 _v} -> {Content | Tracked _v (J l1 l2)}
-- strcatFlow' :: c1: Content -> c2: Content -> Content -- strcatFlow stripped of security

predicate CanFlow :: Label -> Label -> Bool

flowJoinUpper :: l: Label -> m1: {Label | CanFlow l _v} -> m2: {Label | CanFlow l _v} -> { Label | _v == J m1 m2 && CanFlow l _v }
flowJoinLeast :: l: Label -> m1: {Label | CanFlow _v l} -> m2: {Label | CanFlow _v l} -> { Label | _v == J m1 m2 && CanFlow _v l }

atomicFlowL :: hi: File -> lo: {File | canRead hi <= canRead _v} -> {Label | _v == F lo && CanFlow _v (F hi)}
atomicFlowR :: hi: File -> lo: {File | canRead hi <= canRead _v} -> {Label | _v == F hi && CanFlow (F lo) _v}

fread :: p: {Principal | IsAuth _v} -> f: {File | p in canRead _v} -> {Content | Tracked _v (F f)}
-- fread' :: p: Principal -> f: File -> (Content) -- fread stripped of security

fwrite :: p: {Principal | IsAuth _v} -> f: {File | p in canWrite _v} -> c: Content -> l: {Label | CanFlow _v (F f) && Tracked c _v} ->  {File | _v == f}
-- fwrite' :: p: Principal -> f: File -> c: Content -> {File | _v == f} -- fwrite stripped of security

{- client -}

sudoAppend :: pw: Password -> 
              fin: {File | canRead _v == [Admin, User 0]} ->         
              fout: {File | canRead _v == [Admin]} -> 
              (File)
sudoAppend = \pw . \fin . \fout . 
                let c1 = fread (?? :: {Principal | _v == Admin}) (?? :: {File | _v == fin}) in
                let c2 = fread (?? :: {Principal | _v == Admin}) (?? :: {File | _v == fout}) in
                let c = strcatFlow c1 ?? c2 ?? in
                fwrite (?? :: {Principal | _v == Admin}) (?? :: {File | _v == fout}) (?? :: {Content | _v == c}) ??
          
-- ===Solution===
-- sudoAppend = \pw . \fin . \fout . 
              -- if login Admin pw
                -- then
                  -- let c1 = fread Admin fin in
                  -- let c2 = fread Admin fout in
                  -- let c = strcatFlow c1 (F fin) c2 (F fout) in
                  -- fwrite Admin (adminW fout) c (flowJoinLeast (F fout) (atomicFlowL fout fin) (atomicFlowL fout fout))
                -- else ??