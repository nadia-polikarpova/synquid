{- module Authentication -}

-- | User IDs
type UId = Int

-- | Passwords
data Password

-- | Principals
data Principal where
  Admin :: (Principal)
  User :: UId -> (Principal)
  
-- | Is principal authenticated?  
predicate IsAuth :: Principal -> Bool

-- | Constructor for @IsAuth@: checks @pw@ validity and authenticates @p@
login :: p: Principal -> pw: Password -> { Bool | _v == IsAuth p }

{- module FileRM -}

-- | File handles
data File

measure canRead :: File -> Set Principal
measure canWrite :: File -> Set Principal

-- | File content
data Content

-- | Connect file handles to their content
predicate IsContent :: File -> Content -> Bool  

-- | Access permission "axioms" (constructors for @CanRead@ and @CanWrite@)
-- wImpliesR :: p: Principal -> f: {File | p in canWrite _v} -> {File | _v == f && p in canRead _v}
adminW :: f: File -> {File | _v == f && Admin in canWrite _v}

data Label where
  F :: File -> (Label)
  J :: Label -> Label -> Label
  
predicate Tracked :: Content -> Label -> Bool

predicate CanFlow :: Label -> Label -> Bool

flowJoinUpper :: l: Label -> m1: {Label | CanFlow l _v} -> m2: {Label | CanFlow l _v} -> { Label | _v == J m1 m2 && CanFlow l _v }
flowJoinLeast :: l: Label -> m1: {Label | CanFlow _v l} -> m2: {Label | CanFlow _v l} -> { Label | _v == J m1 m2 && CanFlow _v l }

atomicFlowL :: hi: File -> lo: {File | canRead hi <= canRead _v} -> {Label | _v == F lo && CanFlow _v (F hi)}
atomicFlowR :: hi: File -> lo: {File | canRead hi <= canRead _v} -> {Label | _v == F hi && CanFlow (F lo) _v}

fread :: p: {Principal | IsAuth _v} -> f: {File | p in canRead _v} -> {Content | IsContent f _v && Tracked _v (F f)}
-- fwrite :: p: {Principal | IsAuth _v} -> f: {File | p in canWrite _v} -> l: {Label | CanFlow _v (F f)} -> c: {Content | Tracked _v l } -> {File | _v == f && IsContent f c}
fwrite :: p: {Principal | IsAuth _v} -> f: {File | p in canWrite _v} -> c: Content -> l: {Label | Tracked c _v && CanFlow _v (F f)} -> {File | _v == f && IsContent f c}

{- client -}


-- copy :: p: {Principal | _v == Admin && IsAuth _v} -> 
        -- fin: {File | canRead _v == [Admin, User 0]} -> 
        -- c: {Content | IsContent fin _v && Tracked _v (F fin)} ->
        -- fout: {File | canRead _v == [Admin]} -> 
        -- {File | _v == fout && IsContent _v c }
-- copy = ??

-- unsafeCopy :: p: {Principal | _v == Admin && IsAuth _v} -> 
        -- fin: {File | canRead _v == [Admin]} -> 
        -- c: {Content | IsContent fin _v && Tracked _v (F fin)} ->
        -- fout: {File | canRead _v == [Admin, User 0]} -> 
        -- {File | _v == fout && IsContent _v c }
-- unsafeCopy = ??

append :: p: {Principal | _v == Admin && IsAuth _v} -> 
        fin: {File | canRead _v == [Admin, User 0]} -> 
        fout: {File | canRead _v == [Admin]} -> 
        c: {Content | Tracked _v (J (F fin) (F fout))} ->
        {File | _v == fout && IsContent _v c }
append = ??

-- unsafeAppend :: p: {Principal | _v == Admin && IsAuth _v} -> 
        -- fin: {File | canRead _v == [Admin]} -> 
        -- fout: {File | canRead _v == [Admin, User 0]} -> 
        -- c: {Content | Tracked _v (J (F fin) (F fout))} ->
        -- {File | _v == fout && IsContent _v c }
-- unsafeAppend = ??


