{- module Authentication -}

-- | User IDs
data UId

-- | Passwords
data Password

-- | Principals
data Principal where
  Admin :: (Principal)
  User :: UId -> (Principal)
  
-- | Is principal authenticated?  
predicate IsAuth :: Principal -> Bool

-- | Constructor for @IsAuth@: checks @pw@ validity and authenticates @p@
login :: p: Principal -> pw: Password -> { Bool | _v == IsAuth p }

loginFailed :: p: {Principal | !(IsAuth _v)} -> a

{- module FileRM -}

-- | File handles
data File

-- | File content
data Content

-- | Connect file handles to their content
predicate IsContent :: File -> Content -> Bool  
  
-- | Abstract predicates to express access permissions
predicate CanRead :: Principal -> File -> Bool
predicate CanWrite :: Principal -> File -> Bool

-- | Access permission "axioms" (constructors for @CanRead@ and @CanWrite@)
wImpliesR :: p: Principal -> f: {File | CanWrite p _v} -> {File | _v == f && CanRead p _v}
adminW :: f: File -> {File | _v == f && CanWrite Admin _v}

-- | Read file
freadSimple :: p: {Principal | IsAuth _v} -> f: {File | CanRead p _v} -> {Content | IsContent f _v}

{- client -}

sudo :: pw: Password -> f: File -> {Content | IsContent f _v}
sudo = ??
