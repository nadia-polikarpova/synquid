{- module Authentication -}

type UId = Int
type Password = Int

measure isAdmin :: Principal -> Bool

data Principal where
  Admin :: { Principal | isAdmin _v }
  User :: UId -> { Principal | !(isAdmin _v) }
  
predicate IsAuth :: Principal -> Bool

login :: p: Principal -> pw: Password -> { Bool | _v == IsAuth p }

loginFailed :: p: {Principal | !(IsAuth _v)} -> a

{- module FileRM -}

type File = Int
type Content = Int

predicate IsContent :: File -> Content -> Bool  
  
predicate CanRead :: Principal -> File -> Bool   
predicate CanWrite :: Principal -> File -> Bool

-- Access permission axioms
wImpliesR :: p: Principal -> f: {File | CanWrite p _v} -> {File | _v == f && CanRead p _v}
adminW :: p: {Principal | isAdmin _v} -> f: File -> {File | _v == f && CanWrite p _v}

-- Public interface
freadSimple :: p: {Principal | IsAuth _v} -> f: {File | CanRead p _v} -> {Content | IsContent f _v}

{- client -}

sudo :: p: {Principal | isAdmin _v} -> pw: Password -> f: File -> {Content | IsContent f _v}
sudo = ??
