data PList a <o :: a -> a -> Bool> where
	Nil :: PList a <o>
	Cons :: x: a -> xs: PList {a | o x _v} <o> -> PList a <o>
  
termination measure len :: PList a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: PList a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
type List a = PList a <{True}>
type IList a = PList a <{_0 <= _1}>

qualifier {x <= y}
  
foldr :: <p :: PList a -> b -> Bool> .
		f: (xs: List a -> x: a -> acc: {b | p xs _v} -> {b | p (Cons x xs) _v}) ->
		seed: {b | p Nil _v} ->
    ys: List a ->    
		{b | p ys _v}

insertSort :: xs: List a -> {IList a | elems _v == elems xs && len _v == len xs}
insertSort = ??
-- insertSort =  let insert = \as . \y . \ys .
                              -- match ys with
                                -- Nil -> Cons y Nil
                                -- Cons z zs -> if y <= z
                                                -- then Cons y (Cons z zs)
                                                -- else Cons z (insert zs y ys) 
              -- in \xs. foldr insert Nil xs