qualifier {x == y, x != y}

measure len :: List a -> {Int | _v >= 0}
measure elems :: List a -> Set a

data List a decreases len where
  Nil :: {List a | len _v == 0 && elems _v == []}
  Cons :: x: a -> xs: List a -> {List a | len _v == len xs + 1 && elems _v == elems xs + [x]}

measure clen :: CList a -> {Int | _v >= 0}
measure heads :: CList a -> Set a
measure celems :: CList a -> Set a

data CList a decreases clen where
  CNil :: {CList a | clen _v == 0 && celems _v == [] && heads _v == []}
  CCons :: x: a -> xs: {CList a | !(x in heads _v)} -> {CList a | celems _v == celems xs + [x] && clen _v == clen xs + 1 && heads _v == [x] }

compress :: xs: List a -> {CList a | celems _v == elems xs}
compress = ??
