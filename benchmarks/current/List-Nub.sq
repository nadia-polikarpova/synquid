qualifier {x == y, x != y}

true :: {Bool | _v}
false :: {Bool | !_v}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

data UList a where
	UNil :: UList a
	UCons :: x: a -> xs: UList {a | x != _v} -> UList a
  
termination measure ulen :: UList a -> {Int | _v >= 0} where
  UNil -> 0
  UCons x xs -> 1 + ulen xs  
  
measure uelems :: UList a -> Set a where
  UNil -> []
  UCons x xs -> [x] + uelems xs
	
elem :: x: a -> xs: UList a -> {Bool | _v == (x in uelems xs)}
elem = ??	
	
strengthen :: x: a -> xs: {UList a | !(x in uelems _v)} -> {UList {a | _v != x} | uelems _v == uelems xs && ulen _v == ulen xs}
strengthen = ??
	
nub' :: xs: List a -> acc: UList a -> {UList a | uelems _v == uelems acc + elems xs}
nub' = ??