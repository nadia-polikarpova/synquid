qualifier {x >= y, x <= y, x != y}

--type Nat = {Int | _v >= 0}
zero :: {Int | _v == 0}
one :: {Int | _v == 1}
two :: {Int | _v == 2}
--inc :: x:Nat -> {Int | _v == x + 1}
--dec :: x:Nat -> {Int | _v == x - 1}

measure size :: AST -> {Int | _v >= 0}
measure result :: AST -> Int

data AST decreases size where
  Zero :: {AST | size _v == 1 && result _v == 0}
  One :: {AST | size _v == 1 && result _v == 1}
  Two :: {AST | size _v == 1 && result _v == 2}
  PlusNode :: l: AST -> r: AST -> {AST | size _v == size l + size r + 1 && result _v == result l + result r}
  MinusNode :: l: AST -> r: AST -> {AST | size _v == size l + size r + 1 && result _v == result l - result r}
  ProductNode :: l: AST -> r: AST -> {AST | size _v == size l + size r + 1 && result _v == result l * result r}
  --True :: x: Int -> {AST | size _v == 1 && result _v == x}
  --False :: x: Int -> {AST | size _v == 1 && result _v == x}
  --AndNode :: l: AST -> r: AST -> {AST | size _v == size l + size r + 1 && result _v == result l - result r}

type OpCode = {Int | _v >= 0 && _v <= 2}

measure size2 :: PAST -> {Int | _v >= 0}
measure result2 :: PAST -> Int

data PAST decreases size2 where
  IntNode :: x: Int -> {PAST | size2 _v == 1 && result2 _v == x}
  OpNode :: op: OpCode -> l: PAST -> r: PAST -> {PAST | size2 _v == size2 l + size2 r + 1 &&
    ((op == 0) ==> result2 _v == result2 l + result2 r) &&
    ((op == 2) ==> result2 _v == result2 l * result2 r) &&
    ((op == 1) ==> result2 _v == result2 l - result2 r)
  }

--measure len :: List -> {Int | _v >= 0}
--measure result :: List -> Int
--
--data List decreases len where
  --IntNode :: x: Int -> {AST | len _v == 1 && result _v == x}
  --Cons :: x: a -> xs: List a -> {List a | len _v == len xs + 1 && elems _v == elems xs + [x]}

transform :: x: AST -> {PAST | result2 _v == result x}
transform = ??