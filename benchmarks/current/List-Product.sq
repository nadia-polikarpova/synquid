data Pair a b where
	Pair :: x: a -> y: b -> Pair a b
  
measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

map :: f: (a -> b) -> xs: List a -> { List b | len _v == len xs }

append :: xs: List a -> ys: List a -> { List a | len _v == len xs + len ys }

product :: xs: List a -> ys: List b -> {List (Pair (a) (b)) | len _v == len xs * len ys}
product = ??
