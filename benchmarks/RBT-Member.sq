qualifier {x < y, x == y}

type Color = {Int | _v == 0 || _v == 1}

black :: {Int  | _v == 0}
red   :: {Int  | _v == 1}
true  :: {Bool | _v}
false :: {Bool | !_v} -- TODO(BUG): when this line is commented out, this gets printed out: "Sorts (Array Int Bool) and (Array Bool Bool) are incompatible"

measure size        :: RBT a -> {Int | _v >= 0}
measure elems       :: RBT a -> Set a
measure isRed       :: RBT a -> Bool 
measure blackHeight :: RBT a -> Int

data RBT a decreases size where
    Empty :: {RBT a | size _v == 0 && 
              elems _v == [] && 
              !isRed _v &&                 -- nils (empty nodes) must be black
              blackHeight _v == 0}         -- black-height of nils is 0
    Node  :: x: a -> 
             color: Color -> 
             left:  {RBT {a | _v < x} | color == 1 ==> !isRed _v} ->                 -- left keys are less than this key; a red node must have black children
             right: {RBT {a | _v > x} | (color == 1 ==> !isRed _v) &&                -- right keys are greater than this key; a red node must have black children; 
                                        (blackHeight _v == blackHeight left)} ->     -- blackHeight the same as of left
             {RBT a | size _v == size left + size right + 1 && 
                      elems _v == elems left + elems right + [x] && 
                      (!isRed _v ==> (blackHeight _v == blackHeight left + 1)) &&    -- if black ==> black-height is black-height of sub + 1
                      (isRed _v ==> (blackHeight _v == blackHeight left)) &&         -- if red   ==> black-height is black-height of sub
                      (isRed _v <==> color == 1)}                   

--======================================================================
-- Solution:
--
-- member = x t
--   match t with
--     Empty -> false
--     Node e c l r -> if e == x
--                     then true
--                     else if x < e
--                          then member x l
--                          else member x r
--
-- args used       : -e -m=1 -a=2
-- components used : none
-- time            : 3s (on aleks's X1 Carbon)
--======================================================================

member :: x: a -> t: RBT a -> {Bool | _v <==> (x in elems t)}
member = ??
