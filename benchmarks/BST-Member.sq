qualifier {x <= y, x >= y, x != y}

true :: {Bool | _v}
false :: {Bool | !_v}

measure size :: BST a -> {Int | _v >= 0}
measure telems :: BST a -> Set a

data BST a decreases size where
	Empty :: {BST a | size _v == 0 && telems _v == []}
	Node :: x: a -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> {BST a | size _v == size l + size r + 1 && telems _v == telems l + telems r + [x]}
	
member :: x: a -> t: BST a -> {Bool | _v == (x in telems t)}
member = ??