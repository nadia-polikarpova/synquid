qualifier {x <= y, x >= y, x != y}

--true :: {Bool | _v}
--false :: {Bool | !_v}

measure size :: AVL a -> {Int | _v >= 0}
measure elems :: AVL a -> Set a
measure height :: AVL a -> {Int | _v >= 0}

data AVL a decreases size where
	Empty :: {AVL a | size _v == 0 && elems _v == [] && height _v == 0}
	Node :: x: a ->
    l: AVL {a | _v < x} ->
    -- this causes troubles
    --r: { AVL {a | x < _v} | height l - height _v == 1 || height _v - height l == 1 }
    r: AVL {a | x < _v}
      -> {AVL a | size _v == size l + size r + 1 && elems _v == elems l + elems r + [x] && ((height _v == height r + 1 && height r > height l) || (height _v == height l + 1 && height r <= height l)) }
  --NodeWithLH :: x: a -> l: AVL {a | _v < x} -> r: { AVLLH {a | x < _v} | height l - heightLH _v == 1 || heightLH _v - height l == 1 } -> {AVL a | size _v == size l + sizeLH r + 1 && elems _v == elems l + elemsLH r + [x] && ((height _v == heightLH r + 1 && heightLH r > height l) || (height _v == height l + 1 && heightLH r <= height l)) }

measure sizeLH :: AVLLH a -> {Int | _v >= 0}
measure elemsLH :: AVLLH a -> Set a
measure heightLH :: AVLLH a -> {Int | _v >= 0}

data AVLLH a decreases sizeLH where
  EmptyLH :: {AVLLH a | sizeLH _v == 0 && elemsLH _v == [] && heightLH _v == 0}
  NodeLH :: x: a -> l: AVL {a | _v < x} -> r: { AVL {a | x < _v} | 1 == height l - height _v } -> {AVLLH a | sizeLH _v == size l + size r + 1 && elemsLH _v == elems l + elems r + [x] && heightLH _v == height l + 1 }

measure sizeRH :: AVLRH a -> {Int | _v >= 0}
measure elemsRH :: AVLRH a -> Set a
measure heightRH :: AVLRH a -> {Int | _v >= 0}

data AVLRH a decreases sizeRH where
  EmptyRH :: {AVLRH a | sizeRH _v == 0 && elemsRH _v == [] && heightRH _v == 0}
  NodeRH :: x: a -> l: AVL {a | _v < x} -> r: { AVL {a | x < _v} | -1 == height l - height _v } -> {AVLRH a | sizeRH _v == size l + size r + 1 && elemsRH _v == elems l + elems r + [x] && heightRH _v == height r + 1 }

measure sizeN :: AVLN a -> {Int | _v >= 0}
measure elemsN :: AVLN a -> Set a
measure heightN :: AVLN a -> {Int | _v >= 0}

data AVLN a decreases sizeN where
  EmptyN :: {AVLN a | sizeN _v == 0 && elemsN _v == [] && heightN _v == 0}
  NodeN :: x: a -> l: AVL {a | _v < x} -> r: { AVL {a | x < _v} | height l - height _v == 0 } -> {AVLN a | sizeN _v == size l + size r + 1 && elemsN _v == elems l + elems r + [x] && heightN _v == height l + 1 }

balLR :: x:a -> l:AVLRH { a | _v < x } -> r: { AVL { a | _v > x} | heightRH l - height _v == 2 } -> {AVL a |
height _v == heightRH l
&&
elems _v == elemsRH l + elems r + [x]
}
balLR = ??
