qualifier {x >= y, x <= y, x != y}

type Nat = {Int | _v >= 0}

measure fst :: Pair a b -> a
measure snd :: Pair a b -> b

data Pair a b where
  Pair :: x: a -> y: b -> {Pair a b | fst _v == x && snd _v == y}

zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}
dec :: x: Int -> {Int | _v == x - 1}

measure len :: List a -> {Int | _v >= 0}

data List a decreases len where
  Nil :: {List a | len _v == 0}
  Cons :: x: a -> xs: List a -> {List a | len _v == len xs + 1}

concat :: la: List a -> lb: List a -> { List a | len _v == len la + len lb }
concat = ??