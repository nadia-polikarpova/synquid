qualifier {x >= y, x <= y, x != y}

type Nat = {Int | _v >= 0}

zero :: {Int | _v == 0}
-- inc :: x:Int -> {Int | _v == x + 1}
dec :: x:Int -> {Int | _v == x - 1}

measure len :: List a -> Int

data List a decreases len where
	Nil :: {List a | len _v == 0}
	Cons :: x: a -> xs: List a -> {List a | len _v > 0 && len _v == len xs + 1}
	
take :: n: Nat -> xs: {List a | len _v >= n} -> {List a | len _v == n}
take = ??

	
