qualifier {x == 0}

type Color = {Int | _v == 0 || _v == 1}
red   :: {Int | _v == 0}
black :: {Int | _v == 1}

measure size        :: RBT a -> {Int | _v >= 0}
measure elems       :: RBT a -> Set a
measure blackHeight :: RBT a -> {Int | _v >= 0}
measure rootColor :: RBT a -> {Int | _v >= 0 && _v <= 1}

data RBT a <P :: Int -> Bool> decreases size where
    Empty :: color: {Int | _v == 1 && P _v} ->
                    {RBT a <P> | size _v == 0 &&
                                 elems _v == [] &&
                                 blackHeight _v == 0 &&
                                 rootColor _v == color}                               -- black-height of nils is 0
    Node  :: x: a ->
             color: {Int | (_v == 0 || _v == 1) && P _v} ->
             left:  RBT {a | _v < x} <{ color == 1 || _0 == 1 }> ->                 -- left keys are less than this key; a red node must have black children
             right: { RBT {a | x < _v} <{ color == 1 || _0 == 1 }> |                -- right keys are greater than this key; a red node must have black children
                      (blackHeight _v == blackHeight left)} ->                      -- blackHeight the same as of left
             {RBT a <P> | size _v == size left + size right + 1 &&
                          elems _v == elems left + elems right + [x] &&
                          (blackHeight _v == blackHeight left + color) &&             -- black-height is black-height of sub + 1 in case the current node is black
                          rootColor _v == color
                      }

measure welems :: WeakRBT a -> Set a
measure wsize        :: WeakRBT a -> {Int | _v >= 0}
measure wheight :: WeakRBT a -> Int
measure isGood :: WeakRBT a -> Bool
measure wrootColor :: WeakRBT a -> {Int | _v >= 0 && _v <= 1}

data WeakRBT a  decreases wsize where
    Ok :: t: RBT a <{True}> -> { WeakRBT a | welems _v == elems t && wheight _v == blackHeight t &&
                                 wrootColor _v == rootColor t && wsize _v == size t && isGood _v == True }
    Bad :: x: a ->
              lc:    {Int | _v == 0 || _v == 1 } ->
              left:  RBT {a | _v < x} <{ True }> ->
              right: { RBT {a | x < _v} <{ (lc == 0 && rootColor left == 0) ==> _0 == 1 }> | blackHeight _v == blackHeight left} ->
              { WeakRBT a | (welems _v == [x] + elems left + elems right) && (wheight _v == blackHeight left)  &&
                                 wsize _v == size left + size right + 1  && isGood _v == False}

--magicColor :: l: WeakRBT a -> r: RBT a <{True}> -> { Int | ((rootColor r == 0 || wrootColor l == 0) && _v == 1) || _v == 0 }

-- balanceSMall ::
--             c: Color ->
--             x: a ->
--             l: { WeakRBT {a | _v < x} | wsize _v == 1 } ->
--             r: RBT {a | x < _v} <{True}> ->
--             {RBT a <{_0 == 0}> | elems _v == [x] + welems l + elems r && blackHeight _v == blackHeight r  + c}
balanceL :: x: a ->
             l: { WeakRBT {a | _v < x} | isGood _v == False } ->
             r: {RBT {a | x < _v} <{True}> | blackHeight _v == wheight l} ->
             {RBT a <{_0 == 0}> | elems _v == [x] + welems l + elems r &&
             blackHeight _v == blackHeight r + 1 &&
             size _v == size r + wsize l + 1
           }
-- balanceL2 ::
--             color: Color ->
--             x: a ->
--             l: { WeakRBT {a | _v < x} | isGood _v == True && (color == 1 || wrootColor _v == 1) } ->
--             r: {RBT {a | x < _v} <{color == 1 || _0 == 1}> | blackHeight _v == wheight l} ->
--             {RBT a <{_0 == color}> | elems _v == [x] + welems l + elems r && blackHeight _v == blackHeight r + color }
--             --color: Color ->
--             --x: a ->
--             --l:  RBT {a | _v < x} <{color == 1 || _0 == 1}>  ->
--             --r: {RBT {a | x < _v} <{color == 1 || _0 == 1}> | blackHeight _v == blackHeight l} ->
--             --{RBT a <{_0 == color}> | elems _v == [x] + elems l + elems r && blackHeight _v == blackHeight r + color }
--done
-- balanceL2 = ??


balanceL2 ::
            color: Color ->
            x: a ->
            l: { WeakRBT {a | _v < x} |
            !(x in welems _v) &&
              (isGood _v == True && (color == 1 || wrootColor _v == 1)) || wsize _v == 1 } ->
            r: {RBT {a | x < _v} <{color == 1 || _0 == 1}> |
              !(x in elems _v) &&
              blackHeight _v == wheight l
            } ->
            {RBT a <{_0 == color}> | elems _v == [x] + welems l + elems r &&
             blackHeight _v == blackHeight r + color &&
              size _v == size r + wsize l + 1}
            --color: Color ->
            --x: a ->
            --l:  RBT {a | _v < x} <{color == 1 || _0 == 1}>  ->
            --r: {RBT {a | x < _v} <{color == 1 || _0 == 1}> | blackHeight _v == blackHeight l} ->
            --{RBT a <{_0 == color}> | elems _v == [x] + elems l + elems r && blackHeight _v == blackHeight r + color }

isGood :: color: Color -> t: WeakRBT a -> { Bool |
        _v == ((isGood t == True && (color == 1 || wrootColor t == 1)) || wsize t == 1) }

--balLStrong :: x: a ->
--            l: WeakRBT {a | _v < x} ->
--            r: {RBT {a | x < _v} <{True}> | blackHeight _v == wheight l} ->
--            {WeakRBT a | welems _v == [x] + welems l + elems r && wheight _v == blackHeight r + 1}
--balLStrong = ??

balLStrong :: x: a ->
        c: Color ->
        l: { WeakRBT {a | _v < x } |
          --True
          --(wrootColor _v == 0 && wsize _v == 1) ==> isGood _v == True
          --c == 0 ==> (isGood _v == True && (wrootColor _v == 1 || wsize _v == 1))
          !(x in welems _v) &&
        (isGood _v == False && c == 1 ||
        (wrootColor _v == 1 && isGood _v == True) ||
        (wrootColor _v == 0 && isGood _v == True && wsize _v == 1))
          --(c == 0 && isGood _v && (wrootColor _v == 1 || wsize _v == 1)) || c == 1
        } ->
        r: {RBT {a | _v > x} <{c == 0 ==> _0 == 1}> | blackHeight _v == wheight l &&
          !(x in elems _v)
        } ->
        {WeakRBT a | welems _v == [x] + welems l + elems r &&
        wheight _v == blackHeight r + c &&
        wsize _v == wsize l + size r + 1}
balLStrong = ??
