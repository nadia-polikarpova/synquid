qualifier {x <= y, x >= y, x != y}

measure len :: List a -> {Int | _v >= 0}
measure elems :: List a -> Set a

data List a <P :: a -> a -> Bool> decreases len where
	Nil :: {List a <P> | len _v == 0 && elems _v == []}
	Cons :: x: a -> xs: List {a | P x _v} <P> -> {List a <P> | len _v == len xs + 1 && elems _v == elems xs + [x]}
	
type IncList a = List a <{_0 <= _1}>	
	
insert :: x: a -> xs: IncList a -> {IncList a | elems _v == elems xs + [x]}
insert = ??

	
