qualifier {x < y, x == y}

measure size :: BST a -> {Int | _v >= 0}
measure elems :: BST a -> Set a

data BST a decreases size where
	Empty :: {BST a | size _v == 0 && elems _v == []}
	Node :: x: a -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> {BST a | size _v == size l + size r + 1 && 
                                                                               elems _v == elems l + elems r + [x]}

mergePivot :: p: a -> t1: BST {a | _v < p} -> t2: BST {a | _v > p} -> {BST a | elems _v == elems t1 + elems t2}

--============================================================================
-- delete t x =
--   match t with
--     Empty      -> Empty
--     Node e l r -> if x == e
--                   then mergePivot e l r
--                   else if x < e
--                        then Node e (delete x l) r
--                        else Node e l (delete x r)
--
-- args used: -m=2 -a=2 -e
--============================================================================

delete :: t: BST a -> x: a -> {BST a | elems _v == elems t - [x]}
delete = ??
