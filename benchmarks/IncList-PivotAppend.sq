measure ilen :: IList a -> {Int | _v >= 0}
measure ielems :: IList a -> Set a

data IList a decreases ilen where
	INil :: {IList a | ilen _v == 0 && ielems _v == []}
	ICons :: x: a -> xs: IList {a | x <= _v} -> {IList a | ilen _v == ilen xs + 1 && ielems _v == ielems xs + [x]}
		
pivotAppend :: p: a -> xs: IList {a | _v <= p} -> ys: IList {a | _v > p} -> {IList a | ilen _v == ilen xs + ilen ys + 1 && ielems _v == ielems xs + ielems ys + [p] }
pivotAppend = ??


	
