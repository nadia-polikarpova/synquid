leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
neq :: x: a -> y: a -> {Bool | _v == (x != y)}

data Heap a where
	Empty :: Heap a
	Node :: x: a -> l: Heap {a | _v > x} -> r: Heap {a | _v > x} -> Heap a
                                                                              
termination measure size :: Heap a -> {Int | _v >= 0} where
  Empty -> 0
  Node x l r -> 1 + size l + size r  
  
measure elems :: Heap a -> Set a where
  Empty -> []
  Node x l r -> elems l + elems r + [x]    

insert :: t: Heap a -> x: a -> {Heap a | elems _v == elems t + [x]}
insert = \t . \x . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x9 x)
              else Node x x8 (insert x9 x7)
