data Pair a b where
	Pair :: x: a -> y: b -> Pair a b
  
measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
	
partition :: p: a -> xs: List a -> {Pair (List {a | _v <= p}) (List {a | _v > p}) | len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs }
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x5 x6 -> 
        match partition p x6 with
          Pair x11 x12 -> 
            if x5 <= p
              then Pair (Cons x5 x11) x12
              else Pair x11 (Cons x5 x12)

	
