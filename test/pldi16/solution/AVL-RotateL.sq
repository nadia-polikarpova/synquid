inc :: x: Int -> {Int | _v == x + 1}

inline max x y = if x >= y then x else y
inline abs x = if x >= 0 then x else -x

data AVL a where
  Leaf :: AVL a
  Node :: x: a 
            -> l: AVL {a | _v < x} 
            -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1} 
            -> h: {Int | _v == 1 + max (realHeight l) (realHeight r) } 
            -> AVL a
            
termination measure realHeight :: AVL a -> {Int | _v >= 0} where
  Leaf -> 0
  Node x l r h -> 1 + max (realHeight l) (realHeight r)
  
measure balFac :: AVL a -> Int where
  Leaf -> 0
  Node x l r h -> realHeight l - realHeight r
  
measure elems :: AVL a -> Set a where
  Leaf -> []
  Node x l r h -> [x] + elems l + elems r  
        
rotLR :: x:a
          -> l: {AVL {a | _v < x} | balFac _v < 0}
          -> r: {AVL {a | _v > x} | realHeight l - realHeight _v == 2} 
          -> {AVL a | realHeight _v == realHeight l && elems _v == [x] + elems l + elems r}
rotLR = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x7 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x13
                                      (Node x5 x6 x14 x16) (Node x x15
                                                              r x16) x8

rotLL :: x: a
          -> l: {AVL {a | _v < x} | balFac _v > 0} 
          -> r: {AVL {a | _v > x} | realHeight l - realHeight _v == 2} 
          -> {AVL a | realHeight _v == realHeight l && elems _v == [x] + elems l + elems r}
rotLL = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x6 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x5
                                      x6 (Node x x7 r x16) x8

rotL0 :: x: a 
          -> l: {AVL {a | _v < x} | balFac _v == 0} 
          -> r: {AVL {a | _v > x} | realHeight l - realHeight _v == 2} 
          -> {AVL a | realHeight _v == 1 + realHeight l && elems _v == [x] + elems l + elems r}
rotL0 = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x6 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x5
                                      x6 (Node x x7 r x8) (inc x8)
