data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  
	
zipWith :: f: (a -> b -> c) -> xs: List a -> ys: {List b | len _v == len xs} -> {List c | len _v == len xs}
zipWith = \f . \xs . \ys . 
      match xs with
        Nil -> Nil
        Cons x3 x4 -> 
          match ys with
            Nil -> error
            Cons x7 x8 -> let f0 = \x14 .
                              \x15 . f x14 x15 in
                          Cons (f x3 x7) (zipWith f0 x4
                                            x8)
	
