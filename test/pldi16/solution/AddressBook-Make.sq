data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  
  
append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}  
  
data Info where
  Info :: streetAddr: Int -> zipcode: Int -> local: Bool -> Info
    
data Address where
  Address :: info: Info -> priv: Bool -> Address
  
measure isPriv :: Address -> Bool where
  Address info priv -> priv  
  
getPriv :: a:Address -> {Bool | _v == isPriv a}

data AddressBook where
  AddressBook :: business: List {Address | !(isPriv _v)} -> personal: List {Address | isPriv _v} -> AddressBook  
  
measure size :: AddressBook -> {Int | _v >= 0} where
  AddressBook bs ps -> len bs + len ps
  
mkAddressBook :: adds: List Address -> {AddressBook | size _v == len adds}
mkAddressBook = \adds . 
  match adds with
    Nil -> AddressBook Nil Nil
    Cons x5 x6 -> 
      match mkAddressBook x6 with
        AddressBook x10 x11 -> 
          if getPriv x5
            then AddressBook x10 (Cons x5
                                    x11)
            else AddressBook (Cons x5 x10)
                   x11


  