data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

data ListOfLists a where
  Nil2 :: ListOfLists a
  Cons2 :: x: List a -> xs: ListOfLists a -> ListOfLists a
  
termination measure len2 :: ListOfLists a -> {Int | _v >= 0} where
  Nil2 -> 0
  Cons2 x xs -> 1 + len2 xs
  
measure sumLen :: ListOfLists a -> {Int | _v >= 0} where
  Nil2 -> 0
  Cons2 x xs -> sumLen xs + len x

append :: xs: List a -> ys: List a -> { List a | len _v == len xs + len ys }

concat :: xss: ListOfLists a -> { List a | len _v == sumLen xss }
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x3 x4 -> append x3 (concat
                                x4)