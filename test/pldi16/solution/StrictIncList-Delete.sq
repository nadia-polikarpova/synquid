data IList a where
	INil :: IList a
	ICons :: x: a -> xs: IList {a | x < _v} -> IList a
  
termination measure ilen :: IList a -> {Int | _v >= 0} where
  INil -> 0
  ICons x xs -> 1 + ilen xs  

measure ielems :: IList a -> Set a where
  INil -> []
  ICons x xs -> [x] + ielems xs
  
lt :: x: a -> y: a -> {Bool | _v == (x < y)}

delete :: x: a -> xs: IList a -> {IList a | ielems _v == ielems xs - [x]}
delete = \x . \xs . 
    match xs with
      INil -> xs
      ICons x3 x4 -> 
        if x < x3
          then xs
          else 
            if x3 < x
              then ICons x3 (delete x x4)
              else x4
