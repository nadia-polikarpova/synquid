type Color = {Int | 0 <= _v && _v <= 1}
red   :: {Int | _v == 0}
black :: {Int | _v == 1}

data RBT a where
    Empty :: RBT a
    Node  :: x: a ->
             col: Color ->
             left:  { RBT {a | _v < x} | col == 0 ==> color _v == 1 } ->                -- left keys are less than this key; a red node must have black children
             right: { RBT {a | x < _v} | (col == 0 ==> color _v == 1) &&               	-- right keys are greater than this key; a red node must have black children
                                        (blackHeight _v == blackHeight left)} ->        -- blackHeight the same as of left
             RBT a
                      
termination measure size :: RBT a -> {Int | _v >= 0} where
  Empty -> 0
  Node x c l r -> 1 + size l + size r
  
measure color :: RBT a -> {Int | 0 <= _v && _v <= 1} where
  Empty -> 1
  Node x c l r -> c
  
measure elems :: RBT a -> Set a where
  Empty -> []
  Node x c l r -> [x] + elems l + elems r

measure blackHeight :: RBT a -> {Int | _v >= 0} where
  Empty -> 0
  Node x c l r -> c + blackHeight l
  
data WeakRBT a where
    Ok :: x: a ->
             c: Color ->
             left:  { RBT {a | _v < x} | c == 0 ==> color _v == 1 } ->
             right: { RBT {a | x < _v} | (c == 0 ==> color _v == 1) &&
                                        (blackHeight _v == blackHeight left)} ->
             WeakRBT a
    Bad :: x: a ->
              lc:    Color ->
              left:  { RBT {a | _v < x} | color _v == lc} ->
              right: { RBT {a | x < _v } | color _v != lc && blackHeight _v == blackHeight left} ->
              WeakRBT a

termination measure wsize :: WeakRBT a -> {Int | _v >= 0} where
  Ok x c left right -> 1 + size left + size right
  Bad x lc left right -> 1 + size left + size right

measure welems :: WeakRBT a -> Set a where
  Ok x c left right -> [x] + elems left + elems right
  Bad x lc left right -> [x] + elems left + elems right
  
measure wheight :: WeakRBT a -> {Int | _v >= 0} where
  Ok x c left right -> c + blackHeight left
  Bad x lc left right -> blackHeight left

measure isOk :: WeakRBT a -> Bool where
  Ok x c left right -> True
  Bad x lc left right -> False
  
measure wcolor :: WeakRBT a -> {Int | _v >= 0 && _v <= 1} where
  Ok x c left right -> c
  Bad x lc left right -> 0
  
leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
neq :: x: a -> y: a -> {Bool | _v == (x != y)}  

balanceL :: y: a ->
              c: Color ->
              l: {WeakRBT {a | _v < y} | c == 0 ==> isOk _v} ->
              r: {RBT {a | _v > y} | (c == 0 ==> color _v == 1) && blackHeight _v == wheight l} ->
              {WeakRBT a | welems _v == [y] + welems l + elems r && 
                            wheight _v == blackHeight r + c && 
                            wsize _v == 1 + wsize l + size r &&
                            (isOk _v || c == 0)}

balanceR :: x: a ->
              c: Color ->
              l: {RBT {a | _v < x} | c == 0 ==> color _v == 1} ->
              r: {WeakRBT {a | _v > x} | (c == 0 ==> isOk _v) && wheight _v == blackHeight l} ->
              {WeakRBT a | welems _v == [x] + elems l + welems r && 
                            wheight _v == blackHeight l + c && 
                            wsize _v == 1 + size l + wsize r &&
                            (isOk _v || c == 0)}
  
ins :: x: a -> t: RBT a -> {WeakRBT a | welems _v == [x] + elems t &&
                                          wheight _v == blackHeight t &&
                                          size t <= wsize _v && wsize _v <= size t + 1 &&
                                          (isOk _v || color t == 0)}
ins = \x . \t . 
    match t with
      Empty -> Ok x red Empty Empty
      Node x9 x10 x11 x12 -> 
        if (x <= x9) && (x9 <= x)
          then Ok x9 x10 x11 x12
          else 
            if x9 <= x
              then balanceR x9 x10 x11 (ins x
                                          x12)
              else balanceL x9 x10 (ins x x11)
                     x12

mkBlack :: t: WeakRBT a -> {RBT a | elems _v == welems t}
mkBlack = \t . 
  match t with
    Ok x5 x6 x7 x8 -> Node x5 x6 x7
                        x8
    Bad x17 x18 x19 x20 -> Node x17
                             black x19 x20

insert :: x: a -> t: RBT a -> {RBT a | elems _v == elems t + [x]}
insert = \x . \t . 
    match t with
      Empty -> Node x black Empty
                 Empty
      Node x9 x10 x11 x12 -> mkBlack
                               (ins x t)
