data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
	
foldr :: <p :: List a -> b -> Bool> .
		f: (xs: List a -> x: a -> acc: {b | p xs _v} -> {b | p (Cons x xs) _v}) ->
		seed: {b | p Nil _v} ->
    ys: List a ->    
		{b | p ys _v}

append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}
append = \xs . \ys . let f0 =
                       \x2 . \x3 . \x4 . Cons x3 x4 in
                     foldr f0 xs ys