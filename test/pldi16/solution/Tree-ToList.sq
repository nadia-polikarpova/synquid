data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  
	
data Tree a where
	Empty :: Tree a
	Node :: x: a -> l: Tree a -> r: Tree a -> Tree a
  
termination measure size :: Tree a -> {Int | _v >= 0} where
  Empty -> 0
  Node x l r -> size l + size r + 1	

append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}	
	
toList :: t: Tree a -> {List a | len _v == size t}
toList = \t . 
  match t with
    Empty -> Nil
    Node x4 x5 x6 -> Cons x4 (append
                                (toList x5) (toList x6))