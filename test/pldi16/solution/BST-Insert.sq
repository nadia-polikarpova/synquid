leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
neq :: x: a -> y: a -> {Bool | _v == (x != y)}

data BST a where
	Empty :: BST a
	Node  :: x: a -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a
                          
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node x l r -> size l + size r + 1
  
measure telems :: BST a -> Set a where
  Empty -> []
  Node x l r -> telems l + telems r + [x]
  	
insert :: x: a -> t: BST a -> {BST a | telems _v == telems t + [x]}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x x9)
              else Node x7 (insert x x8) x9