type Nat = {Int | _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons y ys -> 1 + len ys  
  	
replicate :: n1: Nat -> x: a -> {List a | len _v == n1}
replicate = \n . \x . let n' = n - 1 in
  if n == 0
    then Nil
    else Cons x (replicate n' x)
