zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}

inline max x y = if x >= y then x else y
inline abs x = if x >= 0 then x else -x
inline eqOrOneLess x y = x <= y && y <= x + 1 

data AVL a where
  Leaf :: AVL a
  Node :: x: a 
            -> l: AVL {a | _v < x} 
            -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1} 
            -> h: {Int | _v == 1 + max (realHeight l) (realHeight r) } 
            -> AVL a
            
termination measure realHeight :: AVL a -> {Int | _v >= 0} where
  Leaf -> 0
  Node x l r h -> 1 + max (realHeight l) (realHeight r)
  
measure balFac :: AVL a -> Int where
  Leaf -> 0
  Node x l r h -> realHeight l - realHeight r
  
measure elems :: AVL a -> Set a where
  Leaf -> []
  Node x l r h -> [x] + elems l + elems r  

getHeight :: t: AVL a -> {Int | _v == realHeight t}
        
balanceL :: x: a
          -> l: AVL {a | _v < x}
          -> l': {AVL {a | _v < x} | eqOrOneLess (realHeight l) (realHeight _v)}          
          -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1 }
          -> {AVL a | eqOrOneLess (1 + max (realHeight l) (realHeight r)) (realHeight _v) && elems _v == [x] + elems l' + elems r}          
                        
balanceR :: x: a
          -> l: AVL {a | _v < x}
          -> r: {AVL {a | _v > x} | realHeight l - 1 <= realHeight _v && realHeight _v <= realHeight l + 1 }
          -> r': {AVL {a | _v > x} | realHeight r <= realHeight _v && realHeight _v <= realHeight r + 1 }
          -> {AVL a | (1 + if realHeight l >= realHeight r then realHeight l else realHeight r) <= realHeight _v && 
                        realHeight _v <= (2 + if realHeight l >= realHeight r then realHeight l else realHeight r) &&
                        elems _v == [x] + elems l + elems r'}
                        
qualifier {x < y}                        
                
insert :: y: a -> t: AVL a -> {AVL a | realHeight t <= realHeight _v && realHeight _v <= realHeight t + 1 &&
                                        elems _v == [y] + elems t}
insert = ??