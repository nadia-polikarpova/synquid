{- @flags: -a=2 -}

zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}

inline max x y = if x >= y then x else y
inline abs x = if x >= 0 then x else -x
inline eqOrOneLess x y = x <= y && y <= x + 1 

data AVL a where
  Leaf :: AVL a
  Node :: x: a 
            -> l: AVL {a | _v < x} 
            -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1} 
            -> h: {Int | _v == 1 + max (realHeight l) (realHeight r) } 
            -> AVL a
            
termination measure realHeight :: AVL a -> {Int | _v >= 0} where
  Leaf -> 0
  Node x l r h -> 1 + max (realHeight l) (realHeight r)
  
measure balFac :: AVL a -> Int where
  Leaf -> 0
  Node x l r h -> realHeight l - realHeight r
  
measure elems :: AVL a -> Set a where
  Leaf -> []
  Node x l r h -> [x] + elems l + elems r  

getHeight :: t: AVL a -> {Int | _v == realHeight t}

{- MinPair: represents a pair (x, t) :: (a, AVL a)
 -   s.t. x is less than all the elements of t -}
data MinPair a where
  Nothing :: MinPair a
  MinPair :: x: a -> t: AVL {a | x < _v} -> MinPair a
  
{- TODO: bug in Program.hs if you replace "Set a" with "a" -}
measure melems :: MinPair a -> Set a where
  Nothing -> []
  MinPair x t -> [x] + elems t

measure mheight :: MinPair a -> {Int | _v >= -1} where
  Nothing -> -1
  MinPair x t -> realHeight t
  
inline nodeHeightM l r = 1 + max (realHeight l) (realHeight r)
inline isReal v l r = (v == nodeHeightM l r)
inline isBal l r n = 0 - n <= realHeight l - realHeight r && realHeight l - realHeight r <= n

{- balHt: If l and r were already balanced (i.e. within 1) then the height of t 
 -   is exactly equal to that of a tree built by directly linking l and r. -}
inline balHt l r t = (!(isBal l r 1) || isReal (realHeight t) l r)

{- bigHt: The height of t is the same or one bigger than the larger of l and r -}
inline bigHt l r t = eqOrOneLess (max (realHeight l) (realHeight r)) (realHeight t)

qualifier {x < y}                        

balance :: x: a
         -> l: AVL {a | _v < x}
         -> r: AVL {a | _v > x} {- | abs (realHeight l - realHeight _v) <= 2-}
         -> {AVL a | balHt l r _v && bigHt l r _v && elems _v == [x] + elems l + elems r}


extractMin :: t: AVL a -> {MinPair a | elems t == melems _v && eqOrOneLess (mheight _v) (realHeight t)}
extractMin = ?? 

