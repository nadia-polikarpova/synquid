qualifier {x == 0}

black :: {Int | _v == 1}

data RBT a where
    Empty :: RBT a
    Node  :: x: a ->
             col: {Int | 0 <= _v && _v <= 1} ->
             left:  { RBT {a | _v < x} | isOk _v && (col == 0 ==> color _v == 1) } ->           -- left keys are less than this key; a red node must have black children
             right: { RBT {a | x < _v} | isOk _v && (col == 0 ==> color _v == 1) &&             -- right keys are greater than this key; a red node must have black children
                                        (blackHeight _v == blackHeight left)} ->                -- blackHeight the same as of left
             RBT a
    Bad :: x: a ->
              lc:    {Int | 0 <= _v  && _v <= 1 } ->
              left:  { RBT {a | _v < x} | isOk _v && color _v == lc} ->
              right: { RBT {a | x < _v } | isOk _v && color _v != lc && blackHeight _v == blackHeight left} ->
              RBT a             
                      
termination measure size :: RBT a -> {Int | _v >= 0} where
  Empty -> 0
  Node x c l r -> 1 + size l + size r
  Bad x lc l r -> 1 + size l + size r
  
measure color :: RBT a -> {Int | 0 <= _v && _v <= 1} where
  Empty -> 1
  Node x c l r -> c
  Bad x lc left right -> 0
  
measure elems :: RBT a -> Set a where
  Empty -> []
  Node x c l r -> [x] + elems l + elems r
  Bad x lc l r -> [x] + elems l + elems r

measure blackHeight :: RBT a -> {Int | _v >= 0} where
  Empty -> 0
  Node x c l r -> c + blackHeight l
  Bad x lc l r -> blackHeight l
  
measure isOk :: RBT a -> Bool where
  Empty -> True
  Node x c left right -> True
  Bad x lc left right -> False  
  
rotateL :: x: a ->                
            lx: {a | _v < x} ->
            llc: {Int | 0 <= _v && _v <= 1} ->
            ll: {RBT {a | _v < lx} | isOk _v && color _v == llc} ->
            lr: {RBT {a | lx < _v && _v < x} | isOk _v && color _v != llc && blackHeight _v == blackHeight ll} -> 
            r: {RBT {a | x < _v} | isOk _v && blackHeight _v == blackHeight ll} ->
            {RBT a | isOk _v && color _v == 0 && elems _v == [x, lx] + elems ll + elems lr + elems r && blackHeight _v == blackHeight r + 1 && size _v == 2 + size ll + size lr + size r}
rotateL = ?? 
          
balanceL :: y: a ->
            c: {Int | 0 <= _v  && _v <= 1} ->
            l: {RBT {a | _v < y} | size _v > 0 && (c == 0 ==> isOk _v)} ->
            r: {RBT {a | _v > y} | isOk _v && (c == 0 ==> color _v == 1) && blackHeight _v == blackHeight l} ->
            {RBT a | elems _v == [y] + elems l + elems r && 
                          blackHeight _v == blackHeight r + c && 
                          size _v == 1 + size l + size r &&
                          (isOk _v || c == 0)}
balanceL = ??
