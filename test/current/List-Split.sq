data Pair a b where
	Pair :: x: a -> y: b -> Pair a b
  
measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
inline abs x = if x >= 0 then x else -x
	
split :: xs: List a -> {Pair {List a | abs (len xs - len _v * 2) <= 1} (List a) | 
  len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs }
split = ??

	
