qualifier {x == 0}

black :: {Int | _v == 1}

data RBT a where
    Empty :: RBT a
    Node  :: x: a ->
             col: {Int | 0 <= _v && _v <= 1} ->
             left:  { RBT {a | _v < x} | col == 0 ==> color _v == 1 } ->                -- left keys are less than this key; a red node must have black children
             right: { RBT {a | x < _v} | (col == 0 ==> color _v == 1) &&               	-- right keys are greater than this key; a red node must have black children
                                        (blackHeight _v == blackHeight left)} ->        -- blackHeight the same as of left
             RBT a
                      
termination measure size :: RBT a -> {Int | _v >= 0} where
  Empty -> 0
  Node x c l r -> 1 + size l + size r
  
measure color :: RBT a -> {Int | 0 <= _v && _v <= 1} where
  Empty -> 1
  Node x c l r -> c
  
measure elems :: RBT a -> Set a where
  Empty -> []
  Node x c l r -> [x] + elems l + elems r

measure blackHeight :: RBT a -> {Int | _v >= 0} where
  Empty -> 0
  Node x c l r -> c + blackHeight l
  
data WeakRBT a where
    Ok :: x: a ->
             c: {Int | 0 <= _v && _v <= 1} ->
             left:  { RBT {a | _v < x} | c == 0 ==> color _v == 1 } ->
             right: { RBT {a | x < _v} | (c == 0 ==> color _v == 1) &&
                                        (blackHeight _v == blackHeight left)} ->
             WeakRBT a
    Bad :: x: a ->
              lc:    {Int | 0 <= _v  && _v <= 1 } ->
              left:  { RBT {a | _v < x} | color _v == lc} ->
              right: { RBT {a | x < _v } | color _v != lc && blackHeight _v == blackHeight left} ->
              WeakRBT a

termination measure wsize :: WeakRBT a -> {Int | _v >= 0} where
  Ok x c left right -> 1 + size left + size right
  Bad x lc left right -> 1 + size left + size right

measure welems :: WeakRBT a -> Set a where
  Ok x c left right -> [x] + elems left + elems right
  Bad x lc left right -> [x] + elems left + elems right
  
measure wheight :: WeakRBT a -> {Int | _v >= 0} where
  Ok x c left right -> c + blackHeight left
  Bad x lc left right -> blackHeight left

measure isOk :: WeakRBT a -> Bool where
  Ok x c left right -> True
  Bad x lc left right -> False
  
measure wcolor :: WeakRBT a -> {Int | _v >= 0 && _v <= 1} where
  Ok x c left right -> c
  Bad x lc left right -> 0
  
rotateR :: x: a ->
            l: RBT {a | _v < x} ->
            rx: {a | x < _v} ->
            rlc: {Int | _v == 0 || _v == 1} ->
            rl: {RBT {a | x < _v && _v < rx} | color _v == rlc && blackHeight _v == blackHeight l} ->
            rr: {RBT {a | rx < _v} | color _v != rlc && blackHeight _v == blackHeight l} ->             
            {WeakRBT a | isOk _v && wcolor _v == 0 && welems _v == [x, rx] + elems l + elems rl + elems rr && wheight _v == blackHeight l + 1 && wsize _v == 2 + size l + size rl + size rr}
rotateR = ??
  
balanceR :: x: a ->
              c: {Int | 0 <= _v  && _v <= 1} ->
              l: {RBT {a | _v < x} | c == 0 ==> color _v == 1} ->
              r: {WeakRBT {a | _v > x} | (c == 0 ==> isOk _v) && wheight _v == blackHeight l} ->
              {WeakRBT a | welems _v == [x] + elems l + welems r && 
                            wheight _v == blackHeight l + c && 
                            wsize _v == 1 + size l + wsize r &&
                            (isOk _v || c == 0)}
balanceR = ??