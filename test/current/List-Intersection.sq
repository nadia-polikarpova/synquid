data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
eq :: x: a -> y: a -> {Bool | _v == (x == y)}
true :: {Bool | _v}
false :: {Bool | !_v}
  
member :: x: a -> xs: List a -> {Bool | _v == (x in elems xs)}
member = ??

coincidence :: xs: List a -> ys: List a -> {List a | elems _v == elems xs * elems ys}
coincidence = ??
