inline max x y = if x >= y then x else y
inline abs x = if x >= 0 then x else -x
inline eqOrOneLess x y = x <= y && y <= x + 1 


data AVL a where
  Leaf :: AVL a
  Node :: x: a 
            -> l: AVL {a | _v < x} 
            -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1} 
            -> h: {Int | _v == 1 + max (realHeight l) (realHeight r) } 
            -> AVL a
            
termination measure realHeight :: AVL a -> {Int | _v >= 0} where
  Leaf -> 0
  Node x l r h -> (1 + max (realHeight l) (realHeight r))
  
measure balFac :: AVL a -> Int where
  Leaf -> 0
  Node x l r h -> realHeight l - realHeight r
  
measure elems :: AVL a -> Set a where
  Leaf -> []
  Node x l r h -> [x] + elems l + elems r  

measure getHeight :: AVL a -> {Int | _v >= 0} where
  Leaf -> 0
  Node x l r h -> h

nodeHeight :: l: AVL a -> r: AVL r -> {Int | _v == 1 + max (realHeight l) (realHeight r)}  

isSkewed :: t: AVL a -> t': AVL a -> {Bool | _v == (realHeight t - realHeight t' == 2)}
    
isLeftHeavy :: t: AVL a -> {Bool | _v == (balFac t > 0)}
    
isRightHeavy :: t: AVL a -> {Bool | _v == (balFac t < 0)}



balL0 :: x: a 
          -> l: {AVL {a | _v < x} | balFac _v == 0} 
          -> r: {AVL {a | _v > x} | realHeight l - realHeight _v == 2} 
          -> {AVL a | realHeight _v == 1 + realHeight l && elems _v == [x] + elems l + elems r}
    
balLL :: x: a
          -> l: {AVL {a | _v < x} | balFac _v > 0} 
          -> r: {AVL {a | _v > x} | realHeight l - realHeight _v == 2} 
          -> {AVL a | realHeight _v == realHeight l && elems _v == [x] + elems l + elems r}
    
balLR :: x:a
          -> l: {AVL {a | _v < x} | balFac _v < 0}
          -> r: {AVL {a | _v > x} | realHeight l - realHeight _v == 2} 
          -> {AVL a | realHeight _v == realHeight l && elems _v == [x] + elems l + elems r}

balR0 :: x: a 
          -> l: AVL {a | _v < x}
          -> r: {AVL {a | _v > x} | realHeight _v - realHeight l == 2 && balFac _v == 0} 
          -> {AVL a | realHeight _v == 1 + realHeight r && elems _v == [x] + elems l + elems r}

balRL :: x: a 
          -> l: AVL {a | _v < x}
          -> r: {AVL {a | _v > x} | realHeight _v - realHeight l == 2 && balFac _v > 0} 
          -> {AVL a | realHeight _v == realHeight r && elems _v == [x] + elems l + elems r}

balRR :: x: a 
          -> l: AVL {a | _v < x}
          -> r: {AVL {a | _v > x} | realHeight _v - realHeight l == 2 && balFac _v < 0} 
          -> {AVL a | realHeight _v == realHeight r && elems _v == [x] + elems l + elems r}
{-
balanceL :: x: a
          -> l: AVL {a | _v < x}
          -> l': {AVL {a | _v < x} | eqOrOneLess (realHeight l) (realHeight _v)}          
          -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1 }
          -> {AVL a | eqOrOneLess (1 + max (realHeight l) (realHeight r)) (realHeight _v) && elems _v == [x] + elems l' + elems r}          
balanceL = ??
-}

inline nodeHeightM l r = 1 + max (realHeight l) (realHeight r)
inline isReal v l r = (v == nodeHeightM l r)
inline isBal l r n = 0 - n <= realHeight l - realHeight r && realHeight l - realHeight r <= n

inline diff s t = realHeight s - realHeight t
inline eqOrUp s t = (diff t s == 0) || (diff t s == 1)

{- balHt: If l and r were already balanced (i.e. within 1) then the height of t 
 -   is exactly equal to that of a tree built by directly linking l and r. -}
inline balHt l r t = (!(isBal l r 1) || isReal (realHeight t) l r)

{- bigHt: The height of t is the same or one bigger than the larger of l and r -}
inline bigHt l r t = eqOrOneLess (max (realHeight l) (realHeight r)) (realHeight t)

{-
  (!(realHeight l >= realHeight r) || eqOrUp l t) && (realHeight l >= realHeight r || eqOrUp r t)
-}

balance :: x: a
         -> l: AVL {a | _v < x}  {- {AVL {a | _v < x} | balFac _v > 0}     {- isLeftHeavy l -}
         -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 2}
         -> {AVL a | balHt l r _v && bigHt l r _v && elems _v == [x] + elems l + elems r}
balance = ??

