data PList a <p :: a -> a -> Bool> where
	Nil :: PList a <p>
	Cons :: x: a -> xs: PList {a | p x _v} <p> -> PList a <p>
  
termination measure len :: PList a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: PList a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

type UList a = PList a <{_0 != _1}>

type Nat = {Int | _v >= 0}

zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}
dec :: x: Int -> {Int | _v == x - 1}
leq :: x: Int -> y: Int -> {Bool | _v == (x <= y)}
neq :: x: Int -> y: Int -> {Bool | _v == (x != y)}
	
range :: size: Nat -> lo: Int -> {UList {Int | lo <= _v && _v <= lo + size} | len _v == size}
range = ??