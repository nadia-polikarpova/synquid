{-
  In this example we assume that all users are either PC members or chair,
  and only chair can see paper authors
-}

{- Datatypes -}

data PaperId

{- Sensitive data and policies -}
   
-- | Current session user
predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

-- | PC chair (public)
predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

getAllPaperIds :: w: World -> Tagged (List PaperId) <{True}>

-- | Paper title (public)
getPaperTitle :: w: World -> pid: PaperId -> Tagged String <{True}>

-- | Paper conflicts (public)
predicate paperConflicts :: World -> Map PaperId (Set User)
getPaperConflicts :: w: World -> pid: PaperId 
                        -> Tagged {List {User | _v in (paperConflicts w)[[pid]]} | elems _v == (paperConflicts w)[[pid]]} <{True}>

-- | Paper score
getPaperScore :: w: World -> pid: PaperId -> Tagged Int <{!(_1 in (paperConflicts _0)[[pid]])}>

{- Client code -}
  
-- | Sort papers by their score.
-- | Repair: inside cmpScore, check that u is not conflicted with pid1/2
sortPapersByScore :: w: World -> World
sortPapersByScore = \w .
  let u = getSessionUser w in
  let cmpScore = \pid1. \pid2.
                  do x1 <- getPaperScore w pid1
                     x2 <- getPaperScore w pid2
                     return (x1 <= x2)
                  in
  let out = do pids <- getAllPaperIds w
               sortedPids <- sortByM cmpScore pids
               titles <- mapM (getPaperTitle w) sortedPids
               foldM (\x . \y . return (strcat x y)) emptyString titles
            in
  print w u out  
