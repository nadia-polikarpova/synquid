
{- Datatypes -}

data PaperId

data PaperId

type Phase = {Int | 0 <= _v && _v < 4}
submission :: {Phase | _v == 0}
review :: {Phase | _v == 1}
rebuttal :: {Phase | _v == 2}
done :: {Phase | _v == 3}

data Status where
  NoDecision :: Status
  Accepted :: Status
  Rejected :: Status

{- Sensitive data and policies -}

-- -- | Current session user
-- predicate sessionUser :: World -> User      
-- getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>
   
-- | Current phase (public)
predicate currentPhase :: World -> Int
getCurrentPhase :: w: World -> Tagged {Int | _v == currentPhase w} <{True}>
setCurrentPhase :: w: World -> phase: Tagged Int <{True}> -> {World | currentPhase _v == content phase}

-- | Paper authors (visible to themselves)
predicate paperAuthors :: World -> PaperId -> Set User
getPaperAuthors :: w: World -> pid: PaperId -> 
  Tagged {List {User | _v in paperAuthors w pid} | elems _v == paperAuthors w pid} 
         <{_1 in paperAuthors _0 pid}>
defaultPaperAuthors :: Tagged (List User) <{True}>  

-- | Paper status (secret until done)
getPaperStatus :: w: World -> pid: PaperId -> 
  -- Tagged Status <{_1 in paperAuthors _0 pid && currentPhase _0 == done}>
  Tagged Status <{currentPhase _0 == done}>
defaultPaperStatus :: Tagged Status <{True}>

{- Client code -}

-- | Send status notification to authors after changing the phase.
-- | No repair is needed, since the phase has been changed.
notifyAuthors :: w: World -> pid: PaperId -> World
notifyAuthors = \w . \pid .
  let status = getPaperStatus w pid in
  let authors = getPaperAuthors w' pid in
  let w' = setCurrentPhase w (return done) in  
  printAll w' authors status
