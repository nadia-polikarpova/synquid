
{- Datatypes -}

data PaperId

type Phase = {Int | 0 <= _v && _v < 4}
submission :: {Phase | _v == 0}
review :: {Phase | _v == 1}
rebuttal :: {Phase | _v == 2}
done :: {Phase | _v == 3}

data Status where
  NoDecision :: Status
  Accepted :: Status
  Rejected :: Status

{- Sensitive data and policies -}   
   
-- | Current phase (public)
predicate currentPhase :: World -> Int
getCurrentPhase :: w: World -> Tagged {Int | _v == currentPhase w} <{True}>
setCurrentPhase :: w: World -> phase: Tagged Int <{True}> -> 
  {World | 
    currentPhase _v == content phase 
    && paperAuthors _v == paperAuthors w
  }

-- | Paper authors (visible to themselves)
predicate paperAuthors :: World -> Map PaperId (Set User)
getPaperAuthors :: w: World -> pid: PaperId -> 
  Tagged {List {User | _v in (paperAuthors w)[[pid]]} | elems _v == (paperAuthors w)[[pid]]}  <{_1 in (paperAuthors _0)[[pid]]}>
defaultPaperAuthors :: List User

-- | Paper status (secret until done)
getPaperStatus :: w: World -> pid: PaperId -> 
  Tagged Status <{_1 in (paperAuthors _0)[[pid]] && currentPhase _0 == done}>
defaultPaperStatus :: Status

{- Client code -}

-- | Send status notification to authors after changing the phase.
-- | The code should be repaired with guard "getCurrentPhase w == rebuttal".
-- | This is because the phase is incremented by 1 in w'.
notifyAuthors :: w: World -> pid: PaperId -> World
notifyAuthors = \w . \pid .
  let status = getPaperStatus w pid in
  let authors = getPaperAuthors w pid in
  let p = getCurrentPhase w in
  let w' = setCurrentPhase w (liftM (\x . x + 1) p) in  
  printAll w' authors (liftM show status)
  
qualifier {x == y + 1}
