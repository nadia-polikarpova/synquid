-- Regular list
data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
-- Length of a list
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
-- Set of elements of a list
measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
eq :: x: a -> y: a -> {Bool | _v == (x == y)}
not :: x: Bool -> {Bool | _v == !x}
and :: x: Bool -> y: Bool -> {Bool | _v == (x && y)}
elem :: x: a -> xs: List a -> {Bool | _v == (x in elems xs)}  
  
-- Tagged things

data User 
  
data Tagged a <visibleTo :: User -> Bool>!
measure content :: Tagged a -> a

return :: <rp :: User -> Bool> . x: a -> Tagged {a | _v == x} <rp>

bind :: <bp :: User -> Bool> . 
  (Tagged a <bp>) -> (a -> Tagged b <bp>) -> Tagged b <bp>

if_ :: <ip :: User -> Bool> . <ic :: Bool> .
  cond: Tagged {Bool | _v ==> ic} <{ic && ip _0}> 
    -> thn: Tagged a <{ic && ip _0}> 
    -> els: Tagged a <ip> 
    -> Tagged {a | (_v == content thn) || (_v == content els)} <ip>
    
-- and_ :: <ap :: User -> Bool> .
  -- x: Tagged Bool <ap> -> y: Tagged Bool <ap> -> Tagged {Bool | _v == (content x && content y)} <ap>  
    
lift1 :: <l1p :: User -> Bool> . <l1f :: a -> b -> Bool> . 
  f: (u: a -> {b | l1f u _v}) ->
  x: Tagged a <l1p> ->
  Tagged {b | l1f (content x) _v} <l1p>    

lift2 :: <l2p :: User -> Bool> . <l2f :: a -> b -> c -> Bool> . 
  f: (u: a -> v: b -> {c | l2f u v _v}) ->
  x: Tagged a <l2p> ->
  y: Tagged b <l2p> ->
  Tagged {c | l2f (content x) (content y) _v} <l2p>
  
-- Strings

data String
emptyString :: String
toString :: a -> String
strcat :: String -> String -> String  
  
-- Conference management  

data World  

print :: <pp :: User -> Bool> . w: World -> viewer: Tagged {User | pp _v} <pp> -> x: Tagged String <pp> -> World
printAll :: <pap :: User -> Bool> . w: World -> viewers: Tagged (List {User | pap _v}) <pap> -> x: Tagged String <pap> -> World
          
data PaperId
   
data Phase where
  Submission :: Phase
  Review :: Phase
  Done :: Phase
  
data Status where
  NoDecision :: Status
  Accepted :: Status
  Rejected :: Status

predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{_0 == sessionUser w}>

predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

predicate currentPhase :: World -> Phase
getCurrentPhase :: w: World -> Tagged {Phase | _v == currentPhase w} <{True}>

predicate paperConflicts :: World -> PaperId -> Set User
getPaperConflicts :: w: World -> pid: PaperId 
                        -> Tagged {List {User | _v in paperConflicts w pid} | elems _v == paperConflicts w pid} <{!(_0 in paperConflicts w pid)}>

getPaperTitle :: w: World -> pid: PaperId -> Tagged String <{!(_0 in paperConflicts w pid)}>

predicate paperAuthors :: World -> PaperId -> Set User
getPaperAuthors :: w: World -> pid: PaperId -> Tagged {List {User | (_v in paperAuthors w pid) && !(_v in paperConflicts w pid)} | elems _v == paperAuthors w pid} <{_0 in paperAuthors w pid}>

predicate paperStatus :: World -> PaperId -> Status
getPaperStatus :: w: World -> pid: PaperId -> Tagged {Status | _v == paperStatus w pid} <{(_0 == chair w) || ((currentPhase w == Done) && (_0 in paperAuthors w pid))}>
defaultPaperStatus :: Tagged Status <{True}>

getPaperSession :: w: World -> pid: PaperId -> Tagged String <{True}>

qualifier {x == w, x in y, !(x in y)} -- ToDo: make this work
-- qualifier {content x == chair w}
-- qualifier {content x in paperAuthors w pid}
-- qualifier {!(content x in paperConflicts w pid)}

-- Print paper status to all its authors
test1 :: World -> PaperId -> World
test1 = \w . \pid .
  let title = getPaperTitle w pid in
  let authors = getPaperAuthors w pid in
  let st = if_ (lift2 eq (getCurrentPhase w) (return Done)) 
              (getPaperStatus w pid) 
              (return NoDecision) in
  let out = lift2 strcat title (lift1 toString st) in
  printAll w authors out
    
-- Print paper status to chair    
test2 :: World -> PaperId -> World
test2 = \w . \pid .
  let ch = getChair w in
  let st = getPaperStatus w pid in
  print w ch (lift1 toString st)
  
-- Print paper authors to session user
test3 :: World -> PaperId -> World
test3 = \w . \pid .
  let u = getSessionUser w in
  let authors = getPaperAuthors w pid in
  let authors' = if_ (lift2 elem u authors) authors (return Nil) in
  let out = lift1 toString authors' in
  print w u out
  
-- Print paper status to session user
test4 :: World -> PaperId -> World
test4 = \w . \pid .
  let u = getSessionUser w in
  let st = if_ (lift2 eq (getChair w) u) 
                (getPaperStatus w pid) 
                (if_ (lift2 and (lift2 eq (getCurrentPhase w) (return Done)) (lift2 elem u (getPaperAuthors w pid)))
                  (getPaperStatus w pid) 
                  (return NoDecision)) in
  print w u (lift1 toString st)  

-- Implicit flow: show status and session to session user
test5 :: World -> PaperId -> World
test5 = \w. \pid .
  let u = getSessionUser w in
  let conflicts = getPaperConflicts w pid in
  let title = if_ (lift1 not (lift2 elem u conflicts)) (getPaperTitle w pid) (return emptyString) in
  -- let st = getPaperStatus w pid in -- Leaky version
  let st = if_ (lift2 and (lift2 eq (getCurrentPhase w) (return Done)) (lift2 elem u (getPaperAuthors w pid)))
                  (getPaperStatus w pid) 
                  (return NoDecision) in
  let ses = bind st (\s . if s == Accepted 
                            then getPaperSession w pid
                            else return emptyString) in
  let out = lift2 strcat title (lift2 strcat (lift1 toString st) ses) in
  print w u out

-- Print paper title and list of conflicts to the session user  
test6 :: World -> PaperId -> World
test6 = \w. \pid .
  let u = getSessionUser w in
  let conflicts = getPaperConflicts w pid in
  let noConflict = lift1 not (lift2 elem u conflicts) in
  let title = if_ noConflict (getPaperTitle w pid) (return emptyString) in
  let conflicts' = if_ noConflict conflicts (return Nil) in  
  let out = lift2 strcat title (lift1 toString conflicts') in
  print w u out
  
selectFrom :: <sp :: User -> Bool> . World -> u: Tagged {User | sp _v} <sp> -> pids: List PaperId -> Tagged String <{_0 == content u}>  
selectFrom = \w. \u. \pids .
  match pids with
    Nil -> return emptyString
    Cons pid rest -> 
      let authors = getPaperAuthors w pid in
      let authors' = if_ (lift2 elem u authors) authors (return Nil) in
      let line = lift1 toString authors' in
      lift2 strcat line (selectFrom w u rest)
  
-- Print all session user's papers  
test7 :: World -> (List PaperId) -> World
test7 = \w. \allPids .
  let u = getSessionUser w in
  print w u (selectFrom w u allPids)
  
  

