-- Regular list
data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
-- Length of a list
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
-- Set of elements of a list
measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
eq :: x: a -> y: a -> {Bool | _v == (x == y)}
-- not :: x: Bool -> {Bool | _v == !x}
-- and :: x: Bool -> y: Bool -> {Bool | _v == (x && y)}
elem :: x: a -> xs: List a -> {Bool | _v == (x in elems xs)}  
  
-- Tagged things

data User 
  
data Tagged a <visibleTo :: User -> Bool>!
measure content :: Tagged a -> a

return :: <rp :: User -> Bool> . x: a -> Tagged {a | _v == x} <rp>

bind :: <bp :: User -> Bool> . <bf :: a -> b -> Bool> .
  x: Tagged a <bp> -> (u: a -> Tagged {b | bf u _v} <bp>) -> Tagged {b | bf (content x) _v} <bp>

if_ :: <ip :: User -> Bool> . <ic :: Bool> .
    thn: Tagged a <{ic && ip _0}> 
    -> els: Tagged a <ip> 
    -> cond: Tagged {Bool | _v ==> ic} <{ic && ip _0}>
    -> Tagged a <ip>
    -- -- -> Tagged {a | (_v == content thn) || (_v == content els)} <ip>
        
lift1 :: <l1p :: User -> Bool> . <l1f :: a -> b -> Bool> . 
  f: (u: a -> {b | l1f u _v}) ->
  x: Tagged a <l1p> ->
  Tagged {b | l1f (content x) _v} <l1p>

lift2 :: <l2p :: User -> Bool> . <l2f :: a -> b -> c -> Bool> . 
  f: (u: a -> v: b -> {c | l2f u v _v}) ->
  x: Tagged a <l2p> ->
  y: Tagged b <l2p> ->
  Tagged {c | l2f (content x) (content y) _v} <l2p>
  
-- Strings

data String
emptyString :: String
toString :: a -> String
strcat :: String -> String -> String  
  
-- Conference management  

data World  

print :: <pp :: User -> Bool> . w: World -> viewer: Tagged {User | pp _v} <pp> -> x: Tagged String <pp> -> World
printAll :: <pap :: User -> Bool> . w: World -> viewers: Tagged (List {User | pap _v}) <pap> -> x: Tagged String <pap> -> World
          
data PaperId
   
data Phase where
  Submission :: Phase
  Review :: Phase
  Done :: Phase
  
data Status where
  NoDecision :: Status
  Accepted :: Status
  Rejected :: Status

predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

predicate currentPhase :: World -> Phase
getCurrentPhase :: w: World -> Tagged {Phase | _v == currentPhase w} <{True}>

getPaperTitle :: w: World -> pid: PaperId -> Tagged String <{True}>

predicate paperAuthors :: World -> PaperId -> Set User
getPaperAuthors :: w: World -> pid: PaperId -> Tagged {List {User | (_v in paperAuthors w pid)} | elems _v == paperAuthors w pid} <{_0 in paperAuthors w pid}>
defaultPaperAuthors :: Tagged (List User) <{True}>

predicate paperStatus :: World -> PaperId -> Status
getPaperStatus :: w: World -> pid: PaperId -> Tagged {Status | _v == paperStatus w pid} <{(currentPhase w == Done) && (_0 in paperAuthors w pid)}>
defaultPaperStatus :: Tagged Status <{True}>

-- qualifier {_v == (x == y), _v == (x in y)}
qualifier {x == y, x in y}
  
-- Print paper status to an author
test1 :: w: World -> pid: {PaperId | sessionUser w in paperAuthors w _v} -> World
test1 = \w . \pid .
  let u = getSessionUser w in
  let out = lift1 toString (getPaperStatus w pid) in
  -- let out = lift1 toString (if_ (getPaperStatus w pid) (return NoDecision) (lift2 eq (getCurrentPhase w) (return Done))) in
  print w u out
      
test2 :: w: World -> pid: PaperId -> World
test2 = \w . \pid .
  let u = getSessionUser w in
  let out1 = lift1 toString (getPaperAuthors w pid) in 
  let out2 = lift1 toString (getPaperStatus w pid) in  
  -- let out1 = lift1 toString (if_ (getPaperAuthors w pid) (return Nil) (lift2 elem u (getPaperAuthors w pid))) in 
  -- let out2 = lift1 toString (if_ (getPaperStatus w pid) (return NoDecision) (lift2 and (lift2 elem u (getPaperAuthors w pid)) (lift2 eq (getCurrentPhase w) (return Done)))) in
  let out = lift2 strcat out1 out2 in
  print w u out
            