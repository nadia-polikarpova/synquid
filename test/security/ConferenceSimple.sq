-- Regular list
data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
-- Length of a list
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
-- Set of elements of a list
measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
eq :: x: a -> y: a -> {Bool | _v == (x == y)}
elem :: x: a -> xs: List a -> {Bool | _v == (x in elems xs)}  
  
-- Tagged things

data User 
  
data Tagged a <visibleTo :: User -> Bool>!
measure content :: Tagged a -> a
tag :: x: a -> Tagged {a | _v == x} <{True}>

if_ :: <ip :: User -> Bool> . <ic :: Bool> .
  cond: Tagged {Bool | _v ==> ic} <{ic && ip _0}> 
    -> thn: Tagged a <{ic && ip _0}> 
    -> els: Tagged a <ip> 
    -> Tagged a <ip>
    
lift1 :: <l1p :: User -> Bool> . <l1f :: a -> b -> Bool> . 
  f: (u: a -> {b | l1f u _v}) ->
  x: Tagged a <l1p> ->
  Tagged {b | l1f (content x) _v} <l1p>    

lift2 :: <l2p :: User -> Bool> . <l2f :: a -> b -> c -> Bool> . 
  f: (u: a -> v: b -> {c | l2f u v _v}) ->
  x: Tagged a <l2p> ->
  y: Tagged b <l2p> ->
  Tagged {c | l2f (content x) (content y) _v} <l2p>
  
-- Strings

data String
emptyString :: String
toString :: a -> String
strcat :: String -> String -> String  
  
-- Conference management  

data World  

print :: <pp :: User -> Bool> . w: World -> viewer: Tagged {User | pp _v} <pp> -> x: Tagged String <pp> -> World
printAll :: <pap :: User -> Bool> . w: World -> viewers: Tagged (List {User | pap _v}) <pap> -> x: Tagged String <pap> -> World
          
data PaperId
   
data Phase where
  Submission :: Phase
  Review :: Phase
  Done :: Phase
  
data Status where
  NoDecision :: Status
  Accepted :: Status
  Rejected :: Status

predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{_0 == sessionUser w}>

predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

predicate currentPhase :: World -> Phase
getCurrentPhase :: w: World -> Tagged {Phase | _v == currentPhase w} <{True}>

getPaperTitle :: World -> PaperId -> Tagged String <{True}>

predicate paperAuthors :: World -> PaperId -> Set User
getPaperAuthors :: w: World -> pid: PaperId -> Tagged {List {User | _v in paperAuthors w pid} | elems _v == paperAuthors w pid} <{_0 in paperAuthors w pid}> 

getPaperStatus :: w: World -> pid: PaperId -> Tagged Status <{(_0 == chair w) || ((currentPhase w == Done) && (_0 in paperAuthors w pid))}>

qualifier {content x == chair w}
qualifier {content x in paperAuthors w pid}

-- Print paper status to all its authors
test1 :: World -> PaperId -> World
test1 = \w . \pid .
  let title = getPaperTitle w pid in
  let authors = getPaperAuthors w pid in
  let st = if_ (lift2 eq (getCurrentPhase w) (tag Done)) 
              (getPaperStatus w pid) 
              (tag NoDecision) in
  let out = lift2 strcat title (lift1 toString st) in
  printAll w authors out
    
-- Print paper status to chair    
test2 :: World -> PaperId -> World
test2 = \w . \pid .
  let ch = getChair w in
  let st = getPaperStatus w pid in
  print w ch (lift1 toString st)
  
-- Print paper authors to session user
test3 :: World -> PaperId -> World
test3 = \w . \pid .
  let u = getSessionUser w in
  let authors = getPaperAuthors w pid in
  let authors' = if_ (lift2 elem u authors) authors (tag Nil) in
  let out = lift1 toString authors' in
  print w u out
  
-- Print paper status to session user
test4 :: World -> PaperId -> World
test4 = \w . \pid .
  let u = getSessionUser w in
  let st = if_ (lift2 eq (getChair w) u) 
                (getPaperStatus w pid) 
                (if_ (lift2 eq (getCurrentPhase w) (tag Done))
                  (if_ (lift2 elem u (getPaperAuthors w pid)) 
                    (getPaperStatus w pid) 
                    (tag NoDecision))
                  (tag NoDecision)) in
  print w u (lift1 toString st)  
