{- Sending a message to multiple viewers, viewers are sensitive -}

{- Datatypes -}

data World

data PaperId

data Phase where
  Submission :: Phase
  Review :: Phase
  Rebuttal :: Phase
  Done :: Phase
  
guard {Submission, Review, Rebuttal, Done}

data Status where
  Accepted :: Status
  Rejected :: Status
  NoDecision :: Status
  
guard {Accepted, Rejected, NoDecision}

{- Sensitive data and policies -}
   
-- | Conference phase (public)
predicate phase :: World -> Phase
getPhase :: w: World -> TIO {Phase | _v == phase w} <{True}> <{False}>

-- | Paper title (public)
getPaperTitle :: w: World -> p: PaperId -> TIO String <{True}> <{False}>

-- | Paper authors (only visible to themselves or when phase is done)
predicate paperAuthors :: World -> Map PaperId (Set User)
getPaperAuthors :: w: World -> p: PaperId -> 
  TIO {List {User | _v in (paperAuthors w)[[p]]} | elems _v == (paperAuthors w)[[p]]} 
    <{_0 in (paperAuthors w)[[p]] || phase w == Done}> <{False}>

-- | Paper status (only visible when phase is done)
getPaperStatus :: w: World -> p: PaperId -> TIO Status <{_0 in (paperAuthors w)[[p]] && phase w == Done}> <{False}>

-- | All papers in the conference
getAllPaperIds :: w: World -> TIO [PaperId] <{True}> <{False}>

redact {NoDecision}  

{- Client code -}
  
-- | Send status notification to authors
-- | Repair: check that phase is Done (we already know viewer is an author)
notifyAuthors :: w: World -> p: PaperId -> TIO Unit <{False}> <{True}>
notifyAuthors = \w . \p .
  do
    status <- getPaperStatus w p
    authors <- getPaperAuthors w p
    printAll authors (show status)
