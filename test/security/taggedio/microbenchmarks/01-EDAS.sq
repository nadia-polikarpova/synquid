{- EDAS -}

{- Datatypes -}

-- | Database
data Store 

data PaperId

data Phase where
  Submission :: Phase
  Review :: Phase
  Rebuttal :: Phase
  Done :: Phase
  
guard {Submission, Review, Rebuttal, Done}

data Status where
  Accepted :: Status
  Rejected :: Status
  NoDecision :: Status
  
guard {Accepted, Rejected, NoDecision}

{- Sensitive data and policies -}
   
-- | Conference phase (public)
predicate phase :: Store -> Phase
getPhase :: ds: Store -> TIO {Phase | _v == phase ds} <{True}> <{False}>

-- | Paper title (public)
getPaperTitle :: ds: Store -> p: PaperId -> TIO String <{True}> <{False}>

-- | Paper status (only visible when phase is done)
getPaperStatus :: ds: Store -> p: PaperId -> TIO Status <{phase ds == Done}> <{False}>

-- | Paper session (public)
getPaperSession :: ds: Store -> p: PaperId -> TIO String <{True}> <{False}>

redact {NoDecision}

{- Client code -}
  
-- | Show data for paper `p` to `client`
-- | Repair: for getPaperStatus, check that phase is Done, otherwise return NoDecision
showSession :: Store -> User -> PaperId -> TIO Unit <{False}> <{True}>
showSession = \ds . \client . \p .
  do t <- getPaperTitle ds p
     st <- getPaperStatus ds p
     if st == Accepted 
       then do
              ses <- getPaperSession ds p
              print client (unwords [t, ses])
       else print client (unwords [t, emptyString])
     
  
