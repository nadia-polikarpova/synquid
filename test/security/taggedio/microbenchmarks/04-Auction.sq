{- Auction: nontrivial redaction -}

{- Datatypes -}

data World

data Phase where
  Bidding :: Phase
  Done :: Phase  
guard {Bidding, Done}

{- Sensitive data and policies -}   

getAllParticipants :: w: World -> [User]

-- | Auction phase (public)
predicate phase :: World -> Phase
getPhase :: w: World -> TIO {Phase | _v == phase w} <{True}> <{False}>

-- | User bid (fully visible to the user themselves and once the phase is done; partially visible to all users who have bid)
predicate hasBid :: World -> Map User Bool
getBid :: w: World -> u: User -> 
  TIO { Maybe (TIO Int <{ phase w == Done || _0 == u }> <{False}>) | just _v == (hasBid w)[[u]] } 
    <{ phase w == Done || _0 == u || (hasBid w)[[_0]]}> <{False}>    
  
{- Client code -}  
  
-- | Show bids of all participants to `client`
-- | Repair: for getBid, check that phase is done or client is p,
--           otherwise check that client has bid, then apply `fmap (const 0)`
--           otherwise return Nothing
showBids :: World -> User -> TIO Unit <{False}> <{True}>
showBids = \w . \client .
  let showParticipant = \p . 
    do 
       mB <- getBid w p
       maybe (return emptyString) (\x . liftM show x) mB in
  do
    rows <- mapM showParticipant (getAllParticipants w)
    print client (unlines rows)  
  