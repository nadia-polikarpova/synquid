{- Self-Referential Policy -}

{- Datatypes -}

-- | Database
data Store

data PaperId

data Phase where
  Submission :: Phase
  Review :: Phase
  Rebuttal :: Phase
  Done :: Phase
  
guard {Submission, Review, Rebuttal, Done}

data Decision where
  Accepted :: Decision
  Rejected :: Decision
  NoDecision :: Decision
  
guard {Accepted, Rejected, NoDecision}

{- Sensitive data and policies -}
   
-- | Conference phase (public)
predicate phase :: Store -> Phase
getPhase :: ds: Store -> TIO {Phase | _v == phase ds} <{True}> <{False}>

-- | Paper title (public)
getPaperTitle :: ds: Store -> p: PaperId -> TIO String <{True}> <{False}>

-- | Paper authors (only visible to themselves or when phase is done)
predicate paperAuthors :: Store -> Map PaperId (Set User)
getPaperAuthors :: ds: Store -> p: PaperId -> 
  TIO {List {User | _v in (paperAuthors ds)[[p]]} | elems _v == (paperAuthors ds)[[p]]} 
    <{_0 in (paperAuthors ds)[[p]] || phase ds == Done}> <{False}>    

-- | Paper status (only visible when phase is done)
getPaperDecision :: ds: Store -> p: PaperId -> TIO Decision <{phase ds == Done}> <{False}>

-- | Paper session (public)
getPaperSession :: ds: Store -> p: PaperId -> TIO String <{True}> <{False}>

redact {NoDecision}  

{- Client code -}
  
-- | Show data for paper `p` to `client`
-- | Repair: for getPaperAuthors, check that phase is done or client is author, otherwise return Nil
--           for getPaperDecision, check that phase is Done, otherwise return NoDecision
showSession :: Store -> User -> PaperId -> TIO Unit <{False}> <{True}>
showSession = \ds . \client . \p .
  do 
     t <- getPaperTitle ds p
     auts <- getPaperAuthors ds p
     dec <- getPaperDecision ds p
     if dec == Accepted 
       then do
              ses <- getPaperSession ds p
              print client (unwords [t, show auts, ses])
       else print client (unwords [t, show auts, emptyString])     
