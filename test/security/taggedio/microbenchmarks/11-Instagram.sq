{- 
  The James Comey Instagram leak: the follow-relationships of private accounts leaks through recommendation algorithms
-}

{- Datatypes -}

data World

{- Sensitive data and policies -}

getAllUsers :: w: World -> [User]

-- | User name (visible to all)
predicate name :: World -> Map User String
getName :: w: World -> u: User -> TIO {String | _v == (name w)[[u]]} <{True}> <{False}>

-- | Is user's account private? (visible to all)
predicate isPrivate :: World -> Map User Bool
getIsPrivate :: w: World -> u: User -> TIO {Bool | _v == (isPrivate w)[[u]]} <{True}> <{False}>

-- | Who this user follows (for private accounts: only visible to followers)
predicate following :: World -> Map User (Set User)
getIsFollowing :: w: World -> who: User -> whom: User ->
  TIO {Bool | _v == (whom in (following w)[[who]])} <{canSee w _0 who && canSee w _0 whom}> <{False}>
setIsFollowing :: w: World -> who: User -> whom: User -> val: Bool ->
  TIO {World | (whom in (following _v)[[who]]) == val && name _v == name w && isPrivate _v == isPrivate w} <{True}> <{canSee w _0 who && canSee w _0 whom}>
  
-- | Is account u public? Yes if it's not private    
inline isPublic w u = !(isPrivate w)[[u]]    
-- | Can x see y? Yes if they are the same, y is public, or x is following y 
inline canSee w x y  =  x == y || isPublic w y || y in (following w)[[x]]

{- Client code -}

-- | Show to client who friend is following
-- Repair: inside shouldRecommend, check if u is public or client is following them, otherwise return false    
showRecommendations :: w: World -> client: User -> newFriend: {User | isPublic w _v && _v in (following w)[[client]]} -> TIO Unit <{False}> <{True}>
showRecommendations = \w . \client . \newFriend .
  do
    uids <- let shouldRecommend = \u1.
              do
                alreadyFollowing <- downgrade (getIsFollowing w client u1)
                if u1 == client || alreadyFollowing
                  then return false -- Do not recommend following myself or people I already follow
                  else getIsFollowing w newFriend u1 -- Recommend following everyone newFriend follows
            in filterM (\u. shouldRecommend u) (getAllUsers w)    
    names <- mapM (\u . getName w u) uids
    print client (unlines names)
  
-- | Follow newFriend and suggest who else to follow  
follow :: w: World -> client: User -> newFriend: {User | isPublic w _v} -> TIO Unit <{False}> <{True}>
follow = \w . \client . \newFriend .
  do
    w' <- setIsFollowing w client newFriend true
    showRecommendations w' client newFriend
    
