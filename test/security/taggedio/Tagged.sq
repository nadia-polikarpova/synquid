{- Tagged -}

data User

-- | Computation with a label and clearance
data TIO a <label :: User -> Bool>- <clear :: User -> Bool>

return :: x: a -> TIO a <{True}> <{False}>

-- bind :: <p :: User -> Bool> . <q :: User -> Bool> . <r :: User -> Bool> . 
  -- x: TIO a <p> <q> 
  -- -> (u: a -> TIO b <r> <p>) 
  -- -> TIO b <{p _0 && r _0}> <{q _0 || p _0}>
  
-- | (>>=)  
bind :: <p :: User -> Bool> . <q :: User -> Bool> . <r :: User -> Bool> . <s :: User -> Bool> . 
  x: TIO a <p> <q> 
  -> (u: a -> TIO b <r> <{p _0 && s _0}>) 
  -> TIO b <{p _0 && r _0}> <{q _0 || (p _0 && s _0)}>  
  
-- | (>>)  
seq :: <p :: User -> Bool> . <q :: User -> Bool> . <r :: User -> Bool> . <s :: User -> Bool> . 
  x: TIO a <p> <q> 
  -> TIO b <r> <s>
  -> TIO b <r> <{q _0 || s _0}>
  
-- | Allow someone to see a boolean that is always false whenever they cannot see it
downgrade :: <bp :: User -> Bool> . <bc :: Bool> . <bq :: User -> Bool> .
  x: TIO {Bool | _v ==> bc} <{bp _0 && bc}> <bq> -> TIO {Bool | _v ==> bc} <bp> <bq>   

{- Output -}      

print :: viewer: User -> msg: String -> TIO Unit <{True}> <{_0 == viewer}>

{- Guards, redaction functions, and qualifiers -}

redact {false, zero, Nil, Nothing, fmap, emptyString}

guard {true, eq, not, leq, elem, sameElems, disjoint, isJust}

qualifier {x == y, x in y, !(x in y), x == []}
