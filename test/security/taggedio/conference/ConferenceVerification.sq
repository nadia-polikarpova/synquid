
-- Strings
s_success :: String

-- | Create a user (open to all)
registerUser :: u: User -> pw: String -> TIO Unit <{False}> <{True}>
registerUser = \u . \pw . 
  do
    w <- getCurrentWorld
    addUser w u pw
    print u s_success

-- | Show all users (only pc chair can see!)
usersView :: TIO Unit <{False}> <{True}>
usersView = 
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    chair <- getChair w
    users <- if u == chair then getUsers w else return []
    print u (show users)

-- | Submit paper
submitForm :: String -> [User] -> [User] -> TIO Unit <{False}> <{True}>
submitForm = \title . \authors . \conflicts .
  do
    w <- getCurrentWorld
    pid <- getFreshPaperId w
    addPaper w pid
    w1 <- getCurrentWorld
    setPaperTitle w1 pid title
    w2 <- getCurrentWorld
    setPaperAuthors w2 pid authors
    w3 <- getCurrentWorld
    setPaperConflicts w3 pid conflicts    

-- | Search papers
searchForm :: (User -> [User] -> Bool) -> Maybe User -> Maybe User -> TIO Unit <{False}> <{True}>
searchForm = \userFilter . \byAuthor . \byReviewer .
  let authorFilter = \w . \u . \pid . \author.
        do
          inAuts <- downgrade (
            do 
              as <- getPaperAuthors w pid
              return (elem u as))
          if inAuts
            then do
                  auts <- getPaperAuthors w pid
                  return (userFilter author auts)
            else return False in
  let revFilter = \w . \u . \pid . \rev .
        do
          noConflict <- downgrade (
            do 
              cs <- getPaperConflicts w pid
              return (!(elem u cs))) 
          pc <- getPC w
          if elem u pc && noConflict
            then do
                  revs <- getPaperReviewers w pid
                  return (userFilter rev revs)
            else return False in                            
  do
    w <- getCurrentWorld
    allPids <- getAllPapers w
    u <- getSessionUser w
    pids <- filterM (\pid . do
                              b1 <- maybe (return True) (authorFilter w u pid) byAuthor
                              b2 <- maybe (return True) (revFilter w u pid) byReviewer
                              return (b1 && b2)) allPids
    print u (unlines (map show pids))

-- | Show paper record
paperView :: PaperId -> TIO Unit <{False}> <{True}>
paperView = \pid .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    noConflict <- downgrade (
      do 
        cs <- getPaperConflicts w pid
        return (!(elem u cs)))
    title <- if noConflict then getPaperTitle w pid else return emptyString
    inAuts <- downgrade (
      do 
        as <- getPaperAuthors w pid
        return (elem u as))
    authors <- if inAuts then getPaperAuthors w pid else return []
    conflicts <- if noConflict then getPaperConflicts w pid else return []
    print u (unwords [title, show authors, show conflicts])
  
-- Show reviews for paper
reviewsView :: PaperId -> TIO Unit <{False}> <{True}>
reviewsView = \pid.
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    allRids <- getAllReviews w
    rids <- filterM (\rid . do
                              p <- getReviewPaper w rid
                              return (p == pid)) allRids
    reviews <- mapM (\rid .
          do
            inAuts <- downgrade (
              do 
                as <- getPaperAuthors w pid
                return (elem u as))          
            rev <- if inAuts
                        then getReview w rid
                        else return (ReviewEntry emptyString emptyString (ReviewScoresEntry 0 0 0 0))
            ch <- getChair w
            auth <- if u == ch then getReviewAuthor w rid else anonymousReviewer (getReviewAuthor w rid)
            return (unwords [show rev, show auth])) rids
    print u (unlines reviews)

-- View/change profile
profileViewGet :: TIO Unit <{False}> <{True}>
profileViewGet =
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    profile <- getUserProfile w u
    match profile with
      UserProfileRecord nam aff acm email -> 
        print u (unlines [nam, aff, acm, email])

profileViewPost :: UserProfile -> TIO Unit <{False}> <{True}>
profileViewPost = \profile .
  do
   w <- getCurrentWorld
   u <- getSessionUser w
   setUserProfile w u profile

-- Submit a review
submitReviewViewPost :: PaperId -> Review -> TIO Unit <{False}> <{True}>
submitReviewViewPost = \pid . \rev .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    newRid <- getFreshReviewId w
    allRids <- getAllReviews w
    existingRids <- filterM (\rid . do
                                      p <- getReviewPaper w rid
                                      return (p == pid)) allRids      
    rauth <- return (ReviewerEntry (length existingRids) u)
    setReviewAuthor w newRid rauth
    w1 <- getCurrentWorld
    setReviewPaper w1 newRid pid
    w2 <- getCurrentWorld
    setReview w2 newRid rev
    
-- Assigns papers to a reviewer
assignReviewersView :: User -> [PaperId] -> TIO Unit <{False}> <{True}>
assignReviewersView = \reviewer . \pids .
  let assignPaper = \pid .
        do
          w <- getCurrentWorld
          revs <- getPaperReviewers w pid
          if elem pid pids
            then setPaperReviewers w pid (Cons reviewer revs)
            else setPaperReviewers w pid (remove reviewer revs) in
  do
    w <- getCurrentWorld
    allPids <- getAllPapers w
    mapM_ assignPaper allPids
