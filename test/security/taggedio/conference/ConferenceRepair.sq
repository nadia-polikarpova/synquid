
-- Strings
s_success :: String

-- | Create a user (open to all)
registerUser :: u: User -> pw: String -> TIO Unit <{False}> <{True}>
registerUser = \u . \pw . 
  do
    w <- getCurrentWorld
    addUser w u pw
    print u s_success

-- | Show all users (only pc chair can see!)
usersView :: TIO Unit <{False}> <{True}>
usersView = 
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    users <- getUsers w
    print u (show users)

-- | Submit paper
submitForm :: String -> [User] -> [User] -> TIO Unit <{False}> <{True}>
submitForm = \title . \authors . \conflicts .
  do
    w <- getCurrentWorld
    pid <- getFreshPaperId w
    addPaper w pid
    w1 <- getCurrentWorld
    setPaperTitle w1 pid title
    w2 <- getCurrentWorld
    setPaperAuthors w2 pid authors
    w3 <- getCurrentWorld
    setPaperConflicts w3 pid conflicts    

-- | Search papers
searchForm :: (User -> [User] -> Bool) -> Maybe User -> Maybe User -> TIO Unit <{False}> <{True}>
searchForm = \userFilter . \byAuthor . \byReviewer .
  let authorFilter = \w . \pid . \author.
        do
          auts <- getPaperAuthors w pid
          return (userFilter author auts) in
  let revFilter = \w . \pid . \rev .
        do
          revs <- getPaperReviewers w pid
          return (userFilter rev revs) in                            
  do
    w <- getCurrentWorld
    allPids <- getAllPapers w
    pids <- filterM (\pid . do
                              b1 <- maybe (return True) (authorFilter w pid) byAuthor
                              b2 <- maybe (return True) (revFilter w pid) byReviewer
                              return (b1 && b2)) allPids
    u <- getSessionUser w
    print u (unlines (map show pids))

-- | Show paper record
paperView :: PaperId -> TIO Unit <{False}> <{True}>
paperView = \pid .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    title <- getPaperTitle w pid
    authors <- getPaperAuthors w pid
    conflicts <- getPaperConflicts w pid
    print u (unwords [title, show authors, show conflicts])
  
-- Show reviews for paper
reviewsView :: PaperId -> TIO Unit <{False}> <{True}>
reviewsView = \pid.
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    allRids <- getAllReviews w
    rids <- filterM (\rid . do
                              p <- getReviewPaper w rid
                              return (p == pid)) allRids
    reviews <- mapM (\rid .
          do
            rev <- getReview w rid
            auth <- getReviewAuthor w rid
            return (unwords [show rev, show auth])) rids
    print u (unlines reviews)

-- View/change profile
profileViewGet :: TIO Unit <{False}> <{True}>
profileViewGet =
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    profile <- getUserProfile w u
    match profile with
      UserProfileRecord nam aff acm email -> 
        print u (unlines [nam, aff, acm, email])

profileViewPost :: UserProfile -> TIO Unit <{False}> <{True}>
profileViewPost = \profile .
  do
   w <- getCurrentWorld
   u <- getSessionUser w
   setUserProfile w u profile

-- Submit a review
submitReviewViewPost :: PaperId -> Review -> TIO Unit <{False}> <{True}>
submitReviewViewPost = \pid . \rev .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    newRid <- getFreshReviewId w
    allRids <- getAllReviews w
    existingRids <- filterM (\rid . do
                                      p <- getReviewPaper w rid
                                      return (p == pid)) allRids      
    rauth <- return (ReviewerEntry (length existingRids) u)
    setReviewAuthor w newRid rauth
    w1 <- getCurrentWorld
    setReviewPaper w1 newRid pid
    w2 <- getCurrentWorld
    setReview w2 newRid rev
    
-- Assigns papers to a reviewer
assignReviewersView :: User -> [PaperId] -> TIO Unit <{False}> <{True}>
assignReviewersView = \reviewer . \pids .
  let assignPaper = \pid .
        do
          w <- getCurrentWorld
          revs <- getPaperReviewers w pid
          if elem pid pids
            then setPaperReviewers w pid (Cons reviewer revs)
            else setPaperReviewers w pid (remove reviewer revs) in
  do
    w <- getCurrentWorld
    allPids <- getAllPapers w
    mapM_ assignPaper allPids
