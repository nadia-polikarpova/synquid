getSSN :: w: World -> u: User -> TIO Int <{_0 == u}> <{False}>
getWeddingDate :: w: World -> TIO String <{_0 == alice || _0 == bob}> <{False}>

alice :: User
bob :: User

good :: w: World -> TIO World <{False}> <{True}>
good = \w .
  do
    a <- getSSN w alice
    print w alice (show a)    
    
printAll :: w: World -> viewers: List User -> msg: String -> TIO World <{True}> <{_0 in elems viewers}>
printAll = \w . \viewers . \msg .
  match viewers with
    Nil -> return w
    Cons v vs -> 
      do
        w' <- print w v msg    
        printAll w' vs msg
        
couple :: {List User | elems _v == [alice, bob]}
couple = [alice, bob] 
        
good1 :: w: World -> TIO World <{False}> <{True}>
good1 = \w .
  do
    d <- getWeddingDate w
    printAll w couple d

bad1 :: w: World -> TIO World <{False}> <{True}>
bad1 = \w .
  do
    a <- getSSN w alice
    w1 <- print w alice (show a)
    b <- getSSN w1 bob
    print w1 bob (show b)

bad2 :: w: World -> TIO World <{False}> <{True}>
bad2 = \w .
  do
    a <- getSSN w alice
    if a == 0
      then print w alice emptyString
      else print w bob emptyString
    
  