-- See Model.sq for definitions

{- Database API -}

homePageString :: String
naString :: String

homePage :: TIO Unit <{False}> <{True}>
homePage = 
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    print u homePageString


-- Which classes a user is teaching, and which classes a user is in.
data ClassInfo where
  ClassInfo :: List Class -> List Class -> ClassInfo

-- View Student user profile
profileView :: TIO Unit <{False}> <{True}>
profileView = 
  let teachesClass = \w . \u . \c .
        do
          ins <- getClassInstructor w c
          ts <- getClassTeachers w c
          return (u == ins || elem u ts) 
        in
  let isStudentInClass = \w . \u . \c .
        do
          students <- getClassStudents w c
          return (elem u students) 
        in
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    allClasses <- getClasses w
    teachingClasses <- filterM (\c . teachesClass w u c) allClasses
    takingClasses <- filterM (\c . isStudentInClass w u c) allClasses
    print u (show (ClassInfo teachingClasses takingClasses))

unauthProfileView :: User -> TIO Unit <{False}> <{True}>
unauthProfileView = \somebody .
  let teachesClass = \w . \u . \c .
        do
          ins <- getClassInstructor w c
          ts <- getClassTeachers w c
          return (u == ins || elem u ts) 
        in
  let isStudentInClass = \w . \u . \c .
        do
          students <- getClassStudents w c
          return (elem u students) 
        in
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    allClasses <- getClasses w
    teachingClasses <- filterM (\c . teachesClass w u c) allClasses
    takingClasses <- filterM (\c . isStudentInClass w u c) allClasses
    print somebody (show (ClassInfo teachingClasses takingClasses))

-- For an assignment, see all the scores for that assignment
scoresForAssignmentView :: Assignment -> TIO Unit <{False}> <{True}>
scoresForAssignmentView = \assn .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    class <- getAssignmentClass w assn
    students <- getClassStudents w class
    forM_ students (\student . 
        do
          name <- getUserName w student
          score <- getScore w student assn
          print u (unwords [name, show score]))
                  
-- For an assignment, see the top scoring student
topScoreForAssignmentView :: Assignment -> TIO Unit <{False}> <{True}>
topScoreForAssignmentView = \assn .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    class <- getAssignmentClass w assn
    students <- getClassStudents w class
    if length students == 0
      then print u naString
      else do
            sorted <- sortByM (\s1 . \s2 . 
                        do
                          score1 <- getScore w s1 assn
                          score2 <- getScore w s2 assn
                          return (score2 <= score1)) students
            name <- getUserName w (head sorted)
            print u name                  

-- For a student, see all of their scores
scoresForStudentView :: User -> TIO Unit <{False}> <{True}>
scoresForStudentView = \student .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    allClasses <- getClasses w
    classes <- filterM (\c . 
                 do
                    students <- getClassStudents w c
                    return (elem student students)) allClasses
    allAssigns <- getAssignments w
    assigns <- filterM (\a . 
                 do
                    c <- getAssignmentClass w a
                    return (elem c classes)) allAssigns
    scores <- mapM (\a . getScore w student a) assigns
    print u (show scores)

