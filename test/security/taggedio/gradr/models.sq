{- Types and fields -}

data World
data User
data Class
data Assignment

{- Users -}

predicate users :: World -> Set User
predicate sessionUser :: World -> User

getCurrentWorld :: TIO World <{True}> <{False}>
getUsers :: w: World -> TIO {List {User | _v in users w} | elems _v == users w} <{True}> <{False}>
getSessionUser :: w: World -> TIO {User | _v == sessionUser w} <{True}> <{False}>
getUserName :: World -> User -> TIO String <{True}> <{False}>
  
{- Class table -}

predicate classInstructor :: World -> Class -> User
predicate classTeachers :: World -> Class -> Set User
predicate classStudents :: World -> Class -> Set User

getClasses :: w: World -> TIO [Class] <{True}> <{False}>

getClassName :: w: World -> c: Class -> TIO String <{True}> <{False}>

getClassInstructor :: w: World -> c: Class -> TIO {User | _v == classInstructor w c} <{True}> <{False}>

getClassTeachers :: w: World -> c: Class -> TIO {List {User | (_v in classTeachers w c)} | elems _v == classTeachers w c} <{True}> <{False}>

getClassStudents :: w: World -> c: Class -> 
  TIO {List {User | (_v in classStudents w c)} | elems _v == classStudents w c} <{_0 in classTeachers w c || _0 == classInstructor w c}> <{False}>
  -- TIO {List {User | (_v in classStudents w c)} | elems _v == classStudents w c} <{True}> <{False}>
  

-- | Remove everyone but viewer from a student list
redactClassStudents :: viewer: User -> orig: TIO [User] <{False}> <{False}> -> TIO {List User | elems _v <= [viewer]} <{_0 == viewer}> <{False}>

redact { redactClassStudents }

{- Assignment table -}

predicate assignmentClass :: World -> Assignment -> Class

getAssignments :: w: World -> TIO [Assignment] <{True}> <{False}>

getAssignmentClass :: w: World -> a: Assignment -> TIO {Class | _v == assignmentClass w a} <{True}> <{False}>

{- Score table -}

getScore :: w: World -> student: User -> assn: Assignment -> TIO Int <{ _0 == student || _0 == (classInstructor w (assignmentClass w assn))}> <{False}>
