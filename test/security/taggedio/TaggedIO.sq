{- TaggedIO -}

data TaggedIO a <visibleTo :: User -> Bool>-

returnIO :: <p :: User -> Bool> .
    x:a ->
    TaggedIO {a | _v == x} <p>

bindIO :: <p :: User -> Bool> . <q :: User -> Bool> .
    TaggedIO a <p> ->
    (a -> TaggedIO b <q>) ->
    TaggedIO b <{p _0 && q _0}>

-- dunno why this one doesn't work


ifIO :: <b :: Bool> . <t :: User -> Bool> .
    cond: Tagged {Bool | (_v ==> b)} <{b && t _0}> ->
    TaggedIO a <{t _0 && b}> ->
    TaggedIO a <t> ->
    TaggedIO a <t>

{-
ifIO :: <b :: Bool> . <t :: User -> Bool> .
    cond: Tagged {Bool | (_v == b)} <{b && t _0}> ->
    TaggedIO a <{t _0 && b}> ->
    TaggedIO a <{t _0 && !b}> ->
    TaggedIO a <t>
-}

-- gets the 'disjunctive right-hand-side' error
{-
ifIO :: <b :: Bool> . <t :: User -> Bool> . <notb :: Bool> .
    cond: Tagged {Bool | (_v ==> b) && ((!_v) ==> notb)} <{b && t _0}> ->
    TaggedIO a <{t _0 && b}> ->
    TaggedIO a <{t _0 && notb}> ->
    TaggedIO a <t>
-}

-- what I want the complete version to look like

{-
ifIO :: <b :: Bool> . <t :: User -> Bool> . <r :: User -> Bool>
    cond: Tagged {Bool | (_v == b)} <{b && t _0}> ->
    TaggedIO (Tagged a <{b && r _0}>) <{t _0 && b}> ->
    TaggedIO (Tagged a <r>) <{t _0 && !b}> ->
    TaggedIO (Tagged a <r>) <t>
-}


print :: <pp :: User -> Bool> .
    Tagged {User | pp _v} <pp> ->
    Tagged String <pp> ->
    TaggedIO Unit <pp>
