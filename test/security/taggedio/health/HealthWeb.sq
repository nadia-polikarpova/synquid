data World

data RecordId

getCurrentWorld :: TIO World <{True}> <{False}>

{- Users table -}

getUsers :: w: World -> TIO [User] <{True}> <{False}>

predicate sessionUser :: World -> User
getSessionUser :: w: World -> TIO {User | _v == sessionUser w} <{True}> <{False}>

predicate isDoctor :: World -> User -> Bool
getIsDoctor :: w:World -> u:User -> TIO {Bool | _v == isDoctor w u} <{True}> <{False}>

{- Treating table -}

predicate isTreating :: World -> User -> User -> Bool
getIsTreating :: w: World -> doc: User -> patient: User -> TIO {Bool | _v == isTreating w doc patient} <{_0 == doc}> <{False}>

{- Withholding table -}

predicate shouldWithhold :: World -> RecordId -> Bool
getShouldWithhold :: w: World -> r: RecordId -> TIO {Bool | _v == shouldWithhold w r} <{True}> <{False}>

{- Record table -}

predicate recordAuthor :: World -> RecordId -> User
  
getRecordAuthor :: w: World -> rid: RecordId -> TIO {User | _v == recordAuthor w rid} <{True}> <{False}>
  
predicate recordPatient :: World -> RecordId -> User

inline recordPolicy w v rid = v == recordAuthor w rid || v == recordPatient w rid || 
 (!shouldWithhold w rid && isDoctor w v && (isTreating w v (recordPatient w rid) || !(recordIsPsychiatric w rid)))   

getRecordPatient :: w: World -> rid: RecordId -> TIO {User | _v == recordPatient w rid} <{recordPolicy w _0 rid}> <{False}>

getRecordDoctor :: w: World -> rid: RecordId -> TIO {User | isTreating w _v (recordPatient w rid)} <{True}> <{False}> 
    
predicate recordIsPsychiatric :: World -> RecordId -> Bool
  
getRecordIsPsychiatric :: w: World -> rid: RecordId -> TIO {Bool | _v == recordIsPsychiatric w rid} <{recordPolicy w _0 rid}> <{False}>

getRecordText :: w: World -> rid: RecordId -> TIO String <{recordPolicy w _0 rid}> <{False}>
setRecordText :: w: World -> rid: RecordId -> txt:String -> TIO Unit <{True}> <{recordPolicy w _0 rid}>

getAllRecordIds :: w: World -> TIO [RecordId] <{True}> <{False}>

-- | Show the session user the text of record rid
showRecordByIdView :: rid:RecordId -> TIO Unit <{False}> <{True}>
showRecordByIdView = \rid .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    record <- getRecordText w rid
    print u record

-- | Show the session user the text of all records of patientToSearchFor
showRecordsForPatientView :: User -> TIO Unit <{False}> <{True}>
showRecordsForPatientView = \patientToSearchFor .
  let include = \w . \rid .
      do patient <- getRecordPatient w rid
         return (patient == patientToSearchFor) in
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    recordIds <- getAllRecordIds w
    recordsForPatient <- filterM (\rid . include w rid) recordIds
    records <- mapM (\rid . getRecordText w rid) recordsForPatient    
    print u (unlines records)

-- | Show the session user the records they authored
-- (no repair is needed here, because authored records are visible)
showAuthoredRecordsView :: TIO Unit <{False}> <{True}>
showAuthoredRecordsView = 
  let include = \w . \u . \rid .
      do a <- getRecordAuthor w rid
         return (a == u) in
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    recordIds <- getAllRecordIds w
    authoredRecords <- filterM (\rid . include w u rid) recordIds
    records <- mapM (\rid . getRecordText w rid) authoredRecords    
    print u (unlines records)

-- | Update record text with a pure function
-- (no repair is needed since the session user never gets to see the record)
updateRecordForm :: rid:RecordId -> upd:(String -> String) -> TIO Unit <{False}> <{True}>
updateRecordForm = \rid . \upd .
  do
    w <- getCurrentWorld
    txt <- getRecordText w rid
    setRecordText w rid (upd txt)

-- | Get the list of patients for a doctor
-- (we already know that u is treating the patient, so no need to check that)
listOfPatientsView :: TIO Unit <{False}> <{True}>
listOfPatientsView =
  let include = \w . \u . \rid .
      do doc <- getRecordDoctor w rid
         return (doc == u) in
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    recordIds <- getAllRecordIds w
    treatingRecords <- filterM (\rid . include w u rid) recordIds
    patients <- mapM (\rid . getRecordPatient w rid) treatingRecords    
    print u (unlines (map show patients))

