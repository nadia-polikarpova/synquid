data World

data RecordId

getCurrentWorld :: TIO World <{True}> <{False}>

{- Users table -}

getUsers :: w: World -> TIO [User] <{True}> <{False}>

predicate sessionUser :: World -> User
getSessionUser :: w: World -> TIO {User | _v == sessionUser w} <{True}> <{False}>

-- predicate isPatient :: World -> User -> Bool
-- getIsPatient :: w:World -> u:User -> TIO {Bool | _v == isPatient w u} <{True}> <{False}>

predicate isDoctor :: World -> User -> Bool
getIsDoctor :: w:World -> u:User -> TIO {Bool | _v == isDoctor w u} <{True}> <{False}>

-- predicate isPsychiatrist :: World -> User -> Bool
-- getIsPsychiatrist :: w:World -> u:User -> TIO {Bool | _v == isPsychiatrist w u} <{True}> <{False}>

{- Treating table -}

predicate isTreating :: World -> User -> User -> Bool
getIsTreating :: w: World -> doc: User -> patient: User -> TIO {Bool | _v == isTreating w doc patient} <{_0 == doc}> <{False}>

{- Withholding table -}

predicate shouldWithhold :: World -> User -> RecordId -> Bool
getShouldWithhold :: w: World -> u: User -> r: RecordId -> TIO {Bool | _v == shouldWithhold w u r} <{True}> <{False}>

{- Record table -}

predicate recordAuthor :: World -> RecordId -> User
  
getRecordAuthor :: w: World -> rid: RecordId -> TIO {User | _v == recordAuthor w rid} <{True}> <{False}>
  
predicate recordPatient :: World -> RecordId -> User

inline recordPolicy w v rid = v == recordAuthor w rid || 
  (!(shouldWithhold w v rid) && (v == recordPatient w rid || isDoctor w v || (isTreating w v (recordPatient w rid) && recordIsPsychiatric w rid)))

getRecordPatient :: w: World -> rid: RecordId -> TIO {User | _v == recordPatient w rid} <{recordPolicy w _0 rid}> <{False}>
    
predicate recordIsPsychiatric :: World -> RecordId -> Bool
  
getRecordIsPsychiatric :: w: World -> rid: RecordId -> TIO {Bool | _v == recordIsPsychiatric w rid} <{recordPolicy w _0 rid}> <{False}>

-- getAllRecordIds :: World -> List RecordId

-- getAuthoredRecordIds :: w:World -> u:User -> List {RecordId | u == author (record w _v)}

-- setRecord :: w:World -> rid:RecordId -> Tagged Record <{
  -- _1 == author (record _0 rid) ||
  -- ((isPatient _0)[[_1]] && _1 == patient (record _0 rid) && !(shouldWithhold _1 (record _0 rid))) ||
  -- ((isDoctor _0)[[_1]] && !(shouldWithhold _1 (record _0 rid))) ||
  -- ((isPsychiatrist _0)[[_1]] && isTreating _1 (patient (record _0 rid)) && isPsychiatricRecord (record _0 rid) && !(shouldWithhold _1 (record _0 rid)))
-- }> -> {World | sessionUser _v == sessionUser w}

-- getPsychiatristPatients :: u:User -> Tagged (List User) <{(isPsychiatrist _0)[[_1]] && _1 == u}>
-- getDoctorPatients :: u:User -> Tagged (List User) <{(isDoctor _0)[[_1]] && _1 == u}>

showRecordByIdView :: rid:RecordId -> TIO Unit <{False}> <{True}>
showRecordByIdView = \rid .
  do
    w <- getCurrentWorld
    u <- getSessionUser w
    author <- getRecordAuthor w rid
    patient <- getRecordPatient w rid
    isPsych <- getRecordIsPsychiatric w rid 
    print u (unlines [show author, show patient, show isPsych])

-- showRecordsForPatientView :: w:World -> p:User -> World
-- showRecordsForPatientView = \w . \patientToSearchFor .
	-- let sessionUser = getSessionUser w in
  -- let recordIds = getAllRecordIds w in
  -- let records = sequence (map (\rid . getRecord w rid) recordIds) in
  -- let recordsForPatient = bind records (filterM (\record . (bind (getPatient record) (\x . return (x == patientToSearchFor))))) in
  -- print w sessionUser (liftM show recordsForPatient)

-- -- no repair is needed here, because from getAuthoredRecordIds's type
-- -- you can tell that they are already ok
-- showAuthoredRecordsView :: w:World -> World
-- showAuthoredRecordsView = \w .
	-- let sessionUser = getSessionUser w in
	-- let recordIds = bind sessionUser (\user . return (getAuthoredRecordIds w user)) in
	-- let records = bind recordIds (\rids . (mapM (\rid . getRecord w rid) rids)) in
	-- print w sessionUser (liftM show records)

-- updateRecordForm :: w:World -> rid:RecordId -> record:Record -> World
-- updateRecordForm = \w . \rid . \record .
  -- let w' = setRecord w rid (return record) in
  -- showRecordByIdView w' rid
  -- --let newRecord = getRecord w' rid in
	-- --let u = getSessionUser w' in
  -- --print w' u (liftM show newRecord)

-- concat :: List User -> List User -> List User

-- -- get the list of patients for a doctor or psychiatrist
-- listOfPatientsView :: w:World -> World
-- listOfPatientsView = \w .
	-- let sessionUser = getSessionUser w in
	-- let patients1 = bind sessionUser (\u . getPsychiatristPatients u) in
	-- let patients2 = bind sessionUser (\u . getDoctorPatients u) in
	-- let patients = bind patients1 (\p1 . bind patients2 (\p2 . return (concat p1 p2))) in
	-- print w sessionUser (liftM show patients)
