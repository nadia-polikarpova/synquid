
-- and :: x: Bool -> y: Bool -> {Bool | _v == (x && y)}
foldl :: (a -> b -> a) -> a -> (List b) -> a
foldl1 :: f: (a -> a -> a) -> l: List a -> a

-- Strings

s_colon :: String
s_comma :: String
s_paperNo :: String
s_authors :: String
s_qmark :: String

-- Print paper status to all its authors
test1 :: World -> PaperId -> World
test1 = \w . \pid .
  let title = getPaperTitle w pid in
  let authors = getPaperAuthors w pid in
  let st = ifM (liftM2 eq (getCurrentPhase w) (return Done))
              (getPaperStatus w pid)
              (return NoDecision) in
	let out = foldl1 (liftM2 strcat) [title, return s_colon, liftM show st] in 
  printAll w authors out

-- Print paper title to session user
{-
silly :: World -> PaperId -> World
silly = \w . \pid .
  let u = getSessionUser w in
  let title = getPaperTitle w pid in
  print w u (liftM show title)

sillys :: World -> (List PaperId) -> World
sillys = \w . \pids .
  let u = getSessionUser w in
  foldl (\w. \pid. 
    let title = getPaperTitle w pid in
    print w u title) w pids
  match pids with
    Nil -> w
    Cons pid rest ->
  		let title = getPaperTitle w pid in
  		sillys (print w u (liftM show title)) rest
-}
-- Print paper status to chair
test2 :: World -> PaperId -> World
test2 = \w . \pid .
  let ch = getChair w in
  let st = getPaperStatus w pid in
  print w ch (liftM2 strcat (return s_paperNo)
               (liftM2 strcat (return (show pid))
                 (liftM2 strcat (return s_colon)
                   (liftM show st))))

-- Print paper authors to session user
test3 :: World -> PaperId -> World
test3 = \w . \pid .
  let u = getSessionUser w in
  let authors = getPaperAuthors w pid in
  let authors' = ifM (liftM2 elem u authors) authors (return Nil) in
  let out = (liftM2 strcat (return s_paperNo)
              (liftM2 strcat (return (show pid))
                (liftM2 strcat (return s_comma)
                  (liftM2 strcat (return s_authors)
                    (liftM show authors'))))) in
  print w u out

-- Print paper status to session user
test4 :: World -> PaperId -> World
test4 = \w . \pid .
  let u = getSessionUser w in
  let st = ifM (liftM2 eq (getChair w) u)
                (getPaperStatus w pid)
                (ifM (andM (liftM2 eq (getCurrentPhase w) (return Done)) (liftM2 elem u (getPaperAuthors w pid)))
                  (getPaperStatus w pid)
                  (return NoDecision)) in
  print w u (liftM show st)

-- Implicit flow: show status and session to session user
test5 :: World -> PaperId -> World
test5 = \w. \pid .
  let u = getSessionUser w in
  let conflicts = getPaperConflicts w pid in
  let title = ifM (liftM not (liftM2 elem u conflicts)) (getPaperTitle w pid) (return emptyString) in
  let st = ifM (andM (liftM2 eq (getCurrentPhase w) (return Done)) (liftM2 elem u (getPaperAuthors w pid)))
                  (getPaperStatus w pid)
                  (return NoDecision) in
  let ses = bind st (\s . if s == Accepted
                            then getPaperSession w pid
                            else return emptyString) in
  let out = {- liftM2 strcat title -} (liftM2 strcat (liftM show st) ses) in
  print w u out

-- Print paper title and list of conflicts to the session user
test6 :: World -> PaperId -> World
test6 = \w. \pid .
  let u = getSessionUser w in
  let conflicts = getPaperConflicts w pid in
  let noConflict = liftM not (liftM2 elem u conflicts) in
  let title = ifM noConflict (getPaperTitle w pid) (return emptyString) in
  let conflicts' = ifM noConflict conflicts (return Nil) in
  let out = liftM2 strcat title (liftM show conflicts') in
  print w u out

selectFrom :: <sp :: User -> Bool> . World -> u: Tagged {User | sp _v} <sp> -> 
                 pids: List PaperId ->  List (Tagged String <{_0 == content u}>)
selectFrom = \w. \u. \pids .
  map (\pid.
      let conflicts = getPaperConflicts w pid in
      let title = ifM (liftM not (liftM2 elem u conflicts)) (getPaperTitle w pid) (return s_qmark) in
      let authors = getPaperAuthors w pid in
      let authors' = ifM (liftM2 elem u authors) authors (return Nil) in
      foldl1 (liftM2 strcat) (Cons title (Cons (return s_comma) (Cons (return s_authors) (Cons (liftM show authors') Nil))))) pids
      --                     ^ [title, ", ", "authors: ", show authors']

-- Print information about a bunch of papers to session user
test7 :: World -> [PaperId] -> World
test7 = \w. \allPids .
  let u = getSessionUser w in
  foldl (\w. \s. print w u s) w (selectFrom w u allPids)

-- Print all papers to session user
test8 :: World -> World
test8 = \w.
  let u = getSessionUser w in
  let allPids = getAllPapers w in
  foldl (\w. \s. print w u s) w (selectFrom w u allPids)
  
forM_ :: <ap :: User -> Bool> .
   w: World -> l: Tagged (List (Tagged a <ap>)) <ap> -> f: (World -> (Tagged a <ap>) -> World) -> World

-- Print all session user's papers
test9 :: World -> World
test9 = \w.
  let u = getSessionUser w in
  let ownPids {- :: [PaperId]<> -} =
     filterM (\pid. liftM2 elem u (ifM (liftM2 elem u (getPaperAuthors w pid))
                                      (getPaperAuthors w pid) (return Nil)))
             (getAllPapers w) in
  forM_ w (liftM (\l. selectFrom w u l) ownPids) (\w. \s. print w u s)
  --              ^ [PaperId]->[String<>]  ^ [PaperId]<>
  --       ^ [String<>]<>


-- TODO unconflicted papers (for bidding)
-- liftM not (liftM2 elem u (getPaperConflicts w pid)))

-- Print the list of all unconflicted papers
test10 :: World -> World
test10 = \w.
  let u = getSessionUser w in
  let allPids = getAllPapers w in
  --let isUnconflicted = \pid. bind u (\c. bind (getPaperConflicts w pid) 
  --                                         (\cs. return (not (elem c cs)))) in
  {-let isSafeUnconflicted = \pid. 
    bind u (\c. 
      bind (ifM 
              (bind (getPaperConflicts w pid) (\cs. 
                return (not (elem c cs)))) 
              (getPaperConflicts w pid) 
              (return Nil)) 
           (\cs. return (not (elem c cs)))) in-}
  {-let isSafeUnconflicted = \pid. 
   bind u (\c. 
     bind (ifM 
            (bind u (\x. 
              bind (getPaperConflicts w pid) (\cs. 
                return (not (elem x cs))))) 
            (getPaperConflicts w pid)
            (return Nil))
          (\cs. return (not (elem c cs)))) in-}
  let isSafeUnconflicted = \pid. 
   bind u (\c. 
     bind (ifM 
            (bind u (\x. 
              bind (getPaperConflicts w pid) (\cs. 
                return (not (elem x cs))))) 
            (liftM Just (getPaperConflicts w pid))
            (return Nothing))
          (\cs. return (not (elemMaybe c cs)))) in
  let out = filterM isSafeUnconflicted allPids in
  print w u (liftM show out)

-- BUG: remove parens after return ---> ireffutable pattern
-- BUG: second let cannot use first let?

-- Q: Why is (ifM c th el) not equiv (ifM (not c) el th)?
--    IOW why is the tag for else <ip> and not <{!ic && ip _0}>

--defaultPaperAuthors :: Tagged (List User) <{True}>
--defaultPaperBidToken :: Tagged (Maybe Token) <{True}>

-- Produces a token "permission to bid" for session user
test11 :: World -> PaperId -> World
test11 = \w. \pid.
  let u = getSessionUser w in
  -- let authors = getPaperAuthors w pid in
  let conflicts = getPaperConflicts w pid in
  let tok = ifM (liftM not (liftM2 elem u conflicts))
                (getPaperBidToken w pid) (return Nothing) in
  -- NOTE: This is *not* equivalent:
  -- let tok = ifM (liftM2 elem u conflicts) (return Nothing) (getPaperBidToken w pid) in
  let out = [return s_paperNo, return (show pid), return s_colon, liftM show tok] in
  print w u (foldl1 (liftM2 strcat) out)

-- TODO Policy that does not allow authors to bid
--let tok = ifM (andM (liftM not (liftM2 elem u conflicts))
--                    (liftM not (liftM2 elem u authors))) (getPaperBidToken w pid) (return Nothing) in
