homePage :: arg0:World -> World
homePage = \w . 
  let u = getSessionUser w in
  print w u homePageString

getClassesStdByUser :: w:World -> u:User -> Tagged List {Class|u in (classStudents w)[[_v]]} <_1 == u>
getClassesStdByUser = \w . \u .
    filterM (isStudentInClass w u)
      (getClasses w)

getClassesInsByUser :: w:World -> u:User -> Tagged List {Class|u in (classTeachers w)[[_v]] || u == (classInstructor w)[[_v]]} <True>
getClassesInsByUser = \w . \u .
    filterM (teachesClass w u)
      (getClasses w)

getProfileClassInfo :: arg1:World -> u:User -> Tagged String <_1 == u>
getProfileClassInfo = \w . \u . 
    let teachingClasses =
      getClassesInsByUser w u in
    
    let takingClasses =
      getClassesStdByUser w u in
    liftM2 strcat (liftM show
                     teachingClasses) (liftM show
                                         takingClasses)

profileView :: arg0:World -> World
profileView = \w . 
  let u = getSessionUser w in
  
  let content = bind u (\user .
                    getProfileClassInfo w user) in
  print w u content

unauthProfileView :: arg0:World -> World
unauthProfileView = \w . 
  let u = getSessionUser w in
  
  let content = bind u (\user .
                    bind (downgrade (bind
                                       (getArbitraryUser w) (\x5 .
                                         return (eq user x5)))) (\g0 . 
                        if g0
                          then getProfileClassInfo w user
                          else return emptyString)) in
  print w (getArbitraryUser w)
    content

scoresForAssignmentView :: arg1:World -> arg0:Assignment -> World
gradr.sq:94: Error:
  Cannot synthesize guard of type {Bool|_v <==> sessionUser w == (classInstructor w)[[assignmentClass assn]]}
    for branch
    getScore w student assn ::
    Tagged Score <_1 == sessionUser _0 && _0 == w>
    Probable cause: missing components to implement guard

