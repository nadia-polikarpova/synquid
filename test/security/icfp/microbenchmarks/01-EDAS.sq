{- EDAS -}

{- Datatypes -}

data PaperId

data Phase where
  Submission :: Phase
  Review :: Phase
  Rebuttal :: Phase
  Done :: Phase
  
guard {Submission, Review, Rebuttal, Done}

data Status where
  Accepted :: Status
  Rejected :: Status
  NoDecision :: Status
  
guard {Accepted, Rejected, NoDecision}

{- Sensitive data and policies -}
   
-- | Conference phase (public)
predicate phase :: World -> Phase
getPhase :: w: World -> Tagged {Phase | _v == phase w} <{True}>

-- | Paper title (public)
getPaperTitle :: w: World -> p: PaperId -> Tagged String <{True}>

-- | Paper status (only visible when phase is done)
getPaperStatus :: w: World -> p: PaperId -> Tagged Status <{phase _0 == Done}>

-- | Paper session (public)
getPaperSession :: w: World -> p: PaperId -> Tagged String <{True}>

redact {NoDecision}  

{- Client code -}
  
-- | Show data for paper `p` to `client`
-- | Repair: for getPaperStatus, check that phase is Done, otherwise return NoDecision
showSession :: World -> User -> PaperId -> World
showSession = \w . \client . \p .
  let row = do t <- getPaperTitle w p
               st <- getPaperStatus w p
               ses <- if st == Accepted 
                        then getPaperSession w p 
                        else return emptyString
               return (unwords [t, ses])
  in print w (return client) row
  
