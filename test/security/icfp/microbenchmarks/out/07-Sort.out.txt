sortPapersByScore :: arg1:World -> arg0:User -> World
sortPapersByScore = \w .
  \client . 
    let cmpScore = \pid1 . \pid2 .
          do
            x1 <- do
                    g0 <- downgrade (do
                                       x7 <- getPaperConflicts w pid1
                                       return (not (elem client x7)))
                    
                    if g0
                      then getPaperScore w pid1
                      else return zero
            x2 <- do
                    g1 <- downgrade (do
                                       x15 <- getPaperConflicts w pid2
                                       return (not (elem client x15)))
                    
                    if g1
                      then getPaperScore w pid2
                      else return zero
            return (x1 <= x2) in
    
    let out = do
                pids <- getAllPaperIds w
                sortedPids <- sortByM cmpScore
                                pids
                titles <- mapM (getPaperTitle w)
                            sortedPids
                return (unlines titles) in
    print w (return client) out

(Goals: 1)
(Measures: 4)
(Policy size: fromList [("../Prelude.sq",46),("../Tagged.sq",110),("07-Sort.sq",21)])
Goal                  &     Templ  &  Solution  &   Time: Typecheck  &     Repair  &    Recheck  &  Total Synth  \\
sortPapersByScore     &        72  &       130  &             0.02s  &      0.24s  &      0.01s  &        0.27s  \\
Totals                &        72  &       130  &             0.02s  &      0.24s  &      0.01s  &        0.27s  \\
