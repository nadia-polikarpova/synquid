showSession :: arg2:World -> arg1:User -> arg0:PaperId -> World
showSession = \w . \client .
    \p . 
      let row = do
                  t <- getPaperTitle w p
                  st <- do
                          g0 <- downgrade (do
                                             x5 <- getPhase w
                                             return (eq Done x5))
                          
                          if g0
                            then getPaperStatus w p
                            else return NoDecision
                  
                  if st == Accepted
                    then do
                           ses <- getPaperSession w p
                           return (unwords (Cons t (Cons
                                                      ses Nil)))
                    else do
                           ses <- return emptyString
                           return (unwords (Cons t (Cons
                                                      ses Nil))) in
      print w (return client) row

(Goals: 1)
(Measures: 4)
(Policy size: fromList [("../Prelude.sq",46),("../Tagged.sq",110),("01-EDAS.sq",8)])
Goal                  &     Templ  &  Solution  &   Time: Typecheck  &     Repair  &    Recheck  &  Total Synth  \\
showSession           &        79  &       104  &             0.06s  &      0.07s  &      0.00s  &        0.14s  \\
Totals                &        79  &       104  &             0.06s  &      0.07s  &      0.00s  &        0.14s  \\
