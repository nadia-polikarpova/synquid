registerUser :: w:World -> u:User -> pw:String -> World
registerUser = \w . \u . \pw .
      addUser w u pw

usersView :: arg0:World -> World
usersView = \w . 
  let u = getSessionUser w in
  
  if u == (getChair w)
    then 
      let users = getUsers w in
      print w u (liftM show users)
    else w

submitForm :: w:World -> title:String -> arg1:List User -> arg0:List User -> World
submitForm = \w . \title .
    \authors . \conflicts . 
        let pid = getFreshPaperId w in
        
        let w1 = addPaper w pid in
        
        let w2 = setPaperTitle w1 pid
                   (return title) in
        
        let w3 = setPaperAuthors w2 pid
                   (return authors) in
        
        let w4 = setPaperConflicts w3
                   pid (return conflicts) in
        w4

searchForm :: w:World -> byAuthor:Maybe String -> byReviewer:Maybe String -> World
searchForm = \w . \byAuthor .
    \byReviewer . 
      let allPids = getAllPapers w in
      
      let u = getSessionUser w in
      
      let pids = filterM (\pid . andM
                                   (ifJust byAuthor (\author . ifM
                                                                 (bind
                                                                    (getPaperAuthors
                                                                       w pid)
                                                                    (\cs .
                                                                      return
                                                                        (elem
                                                                           (peel
                                                                              u)
                                                                           cs)))
                                                                 (bind
                                                                    (getPaperAuthors
                                                                       w pid)
                                                                    (\cs .
                                                                      return
                                                                        (userFilter
                                                                           w
                                                                           author
                                                                           cs)))
                                                                 (return True)))
                                   (ifJust byReviewer (\revr . ifM
                                                                 (bind
                                                                    (getPaperConflicts
                                                                       w pid)
                                                                    (\cs .
                                                                      return
                                                                        (not
                                                                           (elem
                                                                              (peel
                                                                                 u)
                                                                              cs))))
                                                                 (ifM (bind
                                                                         (getPaperConflicts
                                                                            w
                                                                            pid)
                                                                         (\cs .
                                                                           bind
                                                                             (getPC
                                                                                w)
                                                                             (\pc .
                                                                               return
                                                                                 ((not
                                                                                     (elem
                                                                                        (peel
                                                                                           u)
                                                                                        cs))
                                                                                    &&
                                                                                    (elem
                                                                                       (peel
                                                                                          u)
                                                                                       pc)))))
                                                                    (bind
                                                                       (getPaperReviewers
                                                                          w pid)
                                                                       (\cs .
                                                                         return
                                                                           (userFilter
                                                                              w
                                                                              revr
                                                                              cs)))
                                                                    (return
                                                                       True))
                                                                 (return
                                                                    True))))
                   allPids in
      print w u (liftM show pids)

paperView :: arg1:World -> arg0:PaperId -> World
paperView = \w . \pid . 
    let u = getSessionUser w in
    
    let conflicts =
      getPaperConflicts w pid in
    
    let noConflict = liftM not
                       (liftM2 elem u conflicts) in
    
    let title = ifM noConflict
                  (getPaperTitle w pid) (return
                                           emptyString) in
    
    let authors = getPaperAuthors w
                    pid in
    
    let authors' = ifM (liftM2 elem
                          u authors) authors (return Nil)
      in
    
    let conflicts' = ifM noConflict
                       conflicts (return Nil) in
    
    let out = liftM2 strcat title
                (liftM2 strcat (liftM show
                                  authors') (liftM show
                                               conflicts')) in
    print w u out

reviewsView :: arg1:World -> arg0:PaperId -> World
reviewsView = \w . \pid . 
    let u = getSessionUser w in
    
    let allRids = getAllReviews w in
    
    let rids = filterM (\rid . bind
                                 (getReviewPaper w rid) (\p .
                                   return (p == pid))) allRids in
    print w u (liftM show (bind rids
                             (\rids' . mapM (\rid . ifM (andM
                                                           (bind (getReviewPaper
                                                                    w rid) (\x .
                                                                return (pid ==
                                                                          x)))
                                                           (bind u (\u0 . bind
                                                                            (getReviewPaper
                                                                               w
                                                                               rid)
                                                                            (\pid0 .
                                                                              bind
                                                                                (getPaperAuthors
                                                                                   w
                                                                                   pid)
                                                                                (\authors0 .
                                                                                  return
                                                                                    (elem
                                                                                       u0
                                                                                       authors0))))))
                                                      (getReview w rid)
                                                      emptyReview) rids')))

profileViewGet :: arg0:World -> World
profileViewGet = \w . 
  let u = getSessionUser w in
  
  let profile = bind u (\u' .
                    getUserProfile w u') in
  
  let profile_str = bind profile
                      (\profile' . 
                        match profile' with
                          UserProfileRecord nam aff acm email ->
                            return (foldl1 strcat (Cons nam
                                                     (Cons s_comma (Cons aff
                                                                      (Cons
                                                                         s_comma
                                                                         (Cons
                                                                            acm
                                                                            (Cons
                                                                               s_comma
                                                                               (Cons
                                                                                  email
                                                                                  Nil)))))))))
    in
  print w u profile_str

profileViewPost :: arg1:World -> arg0:UserProfile -> World
profileViewPost = \w .
  \profile . 
    let u = getSessionUser w in
    setUserProfile w (peel u)
      (return profile)

submitReviewViewPost :: arg2:World -> arg1:PaperId -> arg0:Review -> World
submitReviewViewPost = \w .
  \pid . \rev . 
      let u = getSessionUser w in
      
      let rid = getFreshReviewId w in
      
      let w1 = setReviewAuthor w rid u
        in
      
      let w2 = setReviewPaper w1 rid
                 (return pid) in
      
      let w3 = setReview w2 rid
                 (return rev) in
      w3

assignReviewersView :: arg2:World -> arg1:User -> arg0:List PaperId -> World
assignReviewersView = \w .
  \reviewer . \pids . 
      let allPids = getAllPapers w in
      foldl (\w' . \pid .
            setPaperReviewers w' pid (bind
                                        (getPaperReviewers w' pid) (\l .
                                          return (insertIf (elem pid pids)
                                                    reviewer (remove reviewer
                                                                l))))) w allPids

(Goals: 10)
(Measures: 3)
(Policy size: fromList [("../paperWrites/Prelude.sq",20),("../paperWrites/Tagged.sq",123),("Conference.sq",345),("ConferenceVerification.sq",0)])
Goal                  &     Templ  &  Solution  &   Time: Typecheck  &     Repair  &    Recheck  &  Total Synth  \\
registerUser          &        10  &        10  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
usersView             &        29  &        29  &             0.01s  &      0.00s  &      0.00s  &        0.01s  \\
submitForm            &        45  &        45  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
searchForm            &       173  &       173  &             0.91s  &      0.00s  &      0.00s  &        0.91s  \\
paperView             &        99  &        99  &             0.36s  &      0.00s  &      0.00s  &        0.36s  \\
reviewsView           &       111  &       111  &             0.42s  &      0.00s  &      0.00s  &        0.42s  \\
profileViewGet        &        66  &        66  &             0.04s  &      0.00s  &      0.00s  &        0.04s  \\
profileViewPost       &        17  &        17  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
submitReviewViewPost  &        40  &        40  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
assignReviewersView   &        47  &        47  &             0.01s  &      0.00s  &      0.00s  &        0.01s  \\
Totals                &       637  &       637  &             1.77s  &      0.00s  &      0.00s  &        1.77s  \\
