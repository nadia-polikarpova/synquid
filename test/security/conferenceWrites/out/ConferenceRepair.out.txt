registerUser :: w:World -> u:User -> pw:String -> World
registerUser = \w . \u . \pw .
      addUser w u pw

usersView :: arg0:World -> World
usersView = \w . 
  let u = getSessionUser w in
  
  let users = ifM (bind (getChair
                           w) (\x5 . bind u (\x4 . return
                                                     (eq x5 x4)))) (getUsers w)
                defaultUsers in
  print w u (liftM show users)

submitForm :: w:World -> title:String -> arg1:List User -> arg0:List User -> World
submitForm = \w . \title .
    \authors . \conflicts . 
        let pid = getFreshPaperId w in
        
        let w1 = addPaper w pid in
        
        let w2 = setPaperTitle w1 pid
                   (return title) in
        
        let w3 = setPaperAuthors w2 pid
                   (return authors) in
        
        let w4 = setPaperConflicts w3
                   pid (return conflicts) in
        w4

searchForm :: w:World -> byAuthor:Maybe String -> byReviewer:Maybe String -> World
searchForm = \w . \byAuthor .
    \byReviewer . 
      let allPids = getAllPapers w in
      
      let pids = filterM (\pid . andM
                                   (ifJust byAuthor (\author . bind
                                                                 (ifM (bind
                                                                         (getSessionUser
                                                                            w)
                                                                         (\x6 .
                                                                           bind
                                                                             (getPaperAuthors
                                                                                w
                                                                                pid)
                                                                             (\x5 .
                                                                               return
                                                                                 (elem
                                                                                    x6
                                                                                    x5))))
                                                                    (getPaperAuthors
                                                                       w pid)
                                                                    defaultPaperAuthors)
                                                                 (\cs . return
                                                                          (userFilter
                                                                             w
                                                                             author
                                                                             cs))))
                                   (ifJust byReviewer (\revr . bind
                                                                 (ifM (andM
                                                                         (bind
                                                                            (getSessionUser
                                                                               w)
                                                                            (\x18 .
                                                                              bind
                                                                                (getPaperConflicts
                                                                                   w
                                                                                   pid)
                                                                                (\x17 .
                                                                                  return
                                                                                    (not
                                                                                       (elem
                                                                                          x18
                                                                                          x17)))))
                                                                         (bind
                                                                            (getSessionUser
                                                                               w)
                                                                            (\x20 .
                                                                              bind
                                                                                (getPC
                                                                                   w)
                                                                                (\x19 .
                                                                                  return
                                                                                    (elem
                                                                                       x20
                                                                                       x19)))))
                                                                    (getPaperReviewers
                                                                       w pid)
                                                                    defaultPaperReviewers)
                                                                 (\cs . return
                                                                          (userFilter
                                                                             w
                                                                             revr
                                                                             cs)))))
                   allPids in
      
      let u = getSessionUser w in
      print w u (liftM show pids)

paperView :: arg1:World -> arg0:PaperId -> World
paperView = \w . \pid . 
    let u = getSessionUser w in
    
    let title = ifM (bind u (\x7 .
                         bind (getPaperConflicts w pid)
                           (\x6 . return (not (elem x7
                                                 x6))))) (getPaperTitle w pid)
                  defaultPaperTitle in
    
    let authors = ifM (bind u
                         (\x14 . bind (getPaperAuthors w
                                         pid) (\x13 . return (elem x14
                                                                x13))))
                    (getPaperAuthors w pid)
                    defaultPaperAuthors in
    
    let conflicts = ifM (bind u
                           (\x22 . bind (getPaperConflicts
                                           w pid) (\x21 . return (not (elem
                                                                         x22
                                                                         x21)))))
                      (getPaperConflicts w pid)
                      defaultPaperConflicts in
    
    let out = liftM2 strcat title
                (liftM2 strcat (liftM show
                                  authors) (liftM show conflicts))
      in
    print w u out

reviewsView :: arg1:World -> arg0:PaperId -> World
reviewsView = \w . \pid . 
    let u = getSessionUser w in
    
    let allRids = getAllReviews w in
    
    let rids = filterM (\rid . bind
                                 (getReviewPaper w rid) (\p .
                                   return (p == pid))) allRids in
    print w u (liftM show (bind rids
                             (\rids' . mapM (\rid . ifM (andM
                                                           (bind (getReviewPaper
                                                                    w rid)
                                                              (\x9 . return (eq
                                                                               pid
                                                                               x9)))
                                                           (bind u (\x11 . bind
                                                                             (getPaperAuthors
                                                                                w
                                                                                pid)
                                                                             (\x10 .
                                                                               return
                                                                                 (elem
                                                                                    x11
                                                                                    x10)))))
                                                      (getReview w rid)
                                                      defaultReview) rids')))

profileViewGet :: arg0:World -> World
profileViewGet = \w . 
  let u = getSessionUser w in
  
  let profile = bind u (\u' .
                    getUserProfile w u') in
  
  let profile_str = bind profile
                      (\profile' . 
                        match profile' with
                          UserProfileRecord nam aff acm email ->
                            return (foldl1 strcat (Cons nam
                                                     (Cons s_comma (Cons aff
                                                                      (Cons
                                                                         s_comma
                                                                         (Cons
                                                                            acm
                                                                            (Cons
                                                                               s_comma
                                                                               (Cons
                                                                                  email
                                                                                  Nil)))))))))
    in
  print w u profile_str

profileViewPost :: arg1:World -> arg0:UserProfile -> World
profileViewPost = \w .
  \profile . 
    let u = getSessionUser w in
    setUserProfile w (peel u)
      (return profile)

submitReviewViewPost :: arg2:World -> arg1:PaperId -> arg0:Review -> World
submitReviewViewPost = \w .
  \pid . \rev . 
      let u = getSessionUser w in
      
      let rid = getFreshReviewId w in
      
      let w1 = setReviewAuthor w rid u
        in
      
      let w2 = setReviewPaper w1 rid
                 (return pid) in
      
      let w3 = setReview w2 rid
                 (return rev) in
      w3

assignReviewersView :: arg2:World -> arg1:User -> arg0:List PaperId -> World
assignReviewersView = \w .
  \reviewer . \pids . 
      let allPids = getAllPapers w in
      foldl (\w' . \pid .
            setPaperReviewers w' pid (bind
                                        (getPaperReviewers w' pid) (\l .
                                          return (insertIf (elem pid pids)
                                                    reviewer (remove reviewer
                                                                l))))) w allPids

(Goals: 10)
(Measures: 3)
(Policy size: fromList [("../paperWrites/Prelude.sq",20),("../paperWrites/Tagged.sq",123),("Conference.sq",345),("ConferenceRepair.sq",0)])
Goal                  &     Templ  &  Solution  &   Time: Typecheck  &     Repair  &    Recheck  &  Total Synth  \\
registerUser          &        10  &        10  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
usersView             &        20  &        44  &             0.54s  &      0.53s  &      0.03s  &        1.12s  \\
submitForm            &        45  &        45  &             0.86s  &      0.00s  &      0.00s  &        0.86s  \\
searchForm            &        77  &       159  &             4.35s  &      6.78s  &      0.92s  &       12.07s  \\
paperView             &        53  &       135  &             2.33s  &      8.01s  &      0.63s  &       10.98s  \\
reviewsView           &        57  &       102  &             3.14s  &      0.56s  &      0.31s  &        4.02s  \\
profileViewGet        &        66  &        66  &           468.85s  &      0.00s  &      0.00s  &      468.85s  \\
profileViewPost       &        17  &        17  &             4.51s  &      0.00s  &      0.00s  &        4.51s  \\
submitReviewViewPost  &        40  &        40  &             0.65s  &      0.00s  &      0.00s  &        0.65s  \\
assignReviewersView   &        47  &        47  &             1.68s  &      0.00s  &      0.00s  &        1.68s  \\
Totals                &       432  &       665  &           486.95s  &     15.90s  &      1.91s  &      504.77s  \\
