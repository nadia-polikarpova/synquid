registerUser :: w:World -> u:User -> pw:String -> World
registerUser = \w . \u . \pw .
      addUser w u pw

usersView :: arg0:World -> World
usersView = \w . 
  let u = getSessionUser w in
  
  let users = bind (downgrade
                      (bind (getChair w) (\x7 . bind u
                                                  (\x6 . return (eq x7 x6)))))
                (\g0 . 
                  if g0
                    then getUsers w
                    else return Nil) in
  print w u (liftM show users)

submitForm :: w:World -> title:String -> arg1:List User -> arg0:List User -> World
submitForm = \w . \title .
    \authors . \conflicts . 
        let pid = getFreshPaperId w in
        
        let w1 = addPaper w pid in
        
        let w2 = setPaperTitle w1 pid
                   (return title) in
        
        let w3 = setPaperAuthors w2 pid
                   (return authors) in
        
        let w4 = setPaperConflicts w3
                   pid (return conflicts) in
        w4

searchForm :: w:World -> byAuthor:Maybe String -> byReviewer:Maybe String -> World
searchForm = \w . \byAuthor .
    \byReviewer . 
      let allPids = getAllPapers w in
      
      let pids = filterM (\pid . andM
                                   (ifJust byAuthor (\author . bind
                                                                 (bind
                                                                    (downgrade
                                                                       (bind
                                                                          (getSessionUser
                                                                             w)
                                                                          (\x8 .
                                                                            bind
                                                                              (getPaperAuthors
                                                                                 w
                                                                                 pid)
                                                                              (\x7 .
                                                                                return
                                                                                  (elem
                                                                                     x8
                                                                                     x7)))))
                                                                    (\g0 . 
                                                                      if g0
                                                                        then
                                                                          getPaperAuthors
                                                                            w
                                                                            pid
                                                                        else
                                                                          return
                                                                            Nil))
                                                                 (\cs . return
                                                                          (userFilter
                                                                             w
                                                                             author
                                                                             cs))))
                                   (ifJust byReviewer (\revr . bind
                                                                 (bind
                                                                    (downgrade
                                                                       (andM
                                                                          (bind
                                                                             (getSessionUser
                                                                                w)
                                                                             (\x22 .
                                                                               bind
                                                                                 (getPaperConflicts
                                                                                    w
                                                                                    pid)
                                                                                 (\x21 .
                                                                                   return
                                                                                     (not
                                                                                        (elem
                                                                                           x22
                                                                                           x21)))))
                                                                          (bind
                                                                             (getSessionUser
                                                                                w)
                                                                             (\x24 .
                                                                               bind
                                                                                 (getPC
                                                                                    w)
                                                                                 (\x23 .
                                                                                   return
                                                                                     (elem
                                                                                        x24
                                                                                        x23))))))
                                                                    (\g1 . 
                                                                      if g1
                                                                        then
                                                                          getPaperReviewers
                                                                            w
                                                                            pid
                                                                        else
                                                                          return
                                                                            Nil))
                                                                 (\cs . return
                                                                          (userFilter
                                                                             w
                                                                             revr
                                                                             cs)))))
                   allPids in
      
      let u = getSessionUser w in
      print w u (liftM show pids)

paperView :: arg1:World -> arg0:PaperId -> World
paperView = \w . \pid . 
    let u = getSessionUser w in
    
    let title = bind (downgrade
                        (bind u (\x9 . bind
                                         (getPaperConflicts w pid) (\x8 .
                                           return (not (elem x9 x8))))))
                  (\g0 . 
                    if g0
                      then getPaperTitle w pid
                      else return emptyString) in
    
    let authors = bind (downgrade
                          (bind u (\x18 . bind
                                            (getPaperAuthors w pid) (\x17 .
                                              return (elem x18 x17))))) (\g1 .
                      
                      if g1
                        then getPaperAuthors w pid
                        else return Nil) in
    
    let conflicts = bind (downgrade
                            (bind u (\x28 . bind
                                              (getPaperConflicts w pid)
                                              (\x27 . return (not (elem x28
                                                                     x27))))))
                      (\g2 . 
                        if g2
                          then getPaperConflicts w pid
                          else return Nil) in
    
    let out = liftM2 strcat title
                (liftM2 strcat (liftM show
                                  authors) (liftM show conflicts))
      in
    print w u out

reviewsView :: arg1:World -> arg0:PaperId -> World
reviewsView = \w . \pid . 
    let u = getSessionUser w in
    
    let allRids = getAllReviews w in
    
    let rids = filterM (\rid . bind
                                 (getReviewPaper w rid) (\p .
                                   return (p == pid))) allRids in
    print w u (liftM show (bind rids
                             (\rids' . mapM (\rid . bind
                                                      (downgrade (bind u (\x32 .
                                                                      bind
                                                                        (getReviewPaper
                                                                           w
                                                                           rid)
                                                                        (\x31 .
                                                                          bind
                                                                            (getPaperAuthors
                                                                               w
                                                                               x31)
                                                                            (\x30 .
                                                                              return
                                                                                (elem
                                                                                   x32
                                                                                   x30))))))
                                                      (\g0 . 
                                                        if g0
                                                          then getReview w rid
                                                          else return
                                                                 (ReviewEntry
                                                                    emptyString
                                                                    emptyString
                                                                    (ReviewScoresEntry
                                                                       zero zero
                                                                       zero
                                                                       zero))))
                                         rids')))

profileViewGet :: arg0:World -> World
profileViewGet = \w . 
  let u = getSessionUser w in
  
  let profile = bind u (\u' .
                    getUserProfile w u') in
  
  let profile_str = bind profile
                      (\profile' . 
                        match profile' with
                          UserProfileRecord nam aff acm email ->
                            return (foldl1 strcat (Cons nam
                                                     (Cons s_comma (Cons aff
                                                                      (Cons
                                                                         s_comma
                                                                         (Cons
                                                                            acm
                                                                            (Cons
                                                                               s_comma
                                                                               (Cons
                                                                                  email
                                                                                  Nil)))))))))
    in
  print w u profile_str

profileViewPost :: arg1:World -> arg0:UserProfile -> World
profileViewPost = \w .
  \profile . 
    let u = getSessionUser w in
    setUserProfile w (peel u)
      (return profile)

submitReviewViewPost :: arg2:World -> arg1:PaperId -> arg0:Review -> World
submitReviewViewPost = \w .
  \pid . \rev . 
      let u = getSessionUser w in
      
      let rid = getFreshReviewId w in
      
      let w1 = setReviewAuthor w rid u
        in
      
      let w2 = setReviewPaper w1 rid
                 (return pid) in
      
      let w3 = setReview w2 rid
                 (return rev) in
      w3

assignReviewersView :: arg2:World -> arg1:User -> arg0:List PaperId -> World
assignReviewersView = \w .
  \reviewer . \pids . 
      let allPids = getAllPapers w in
      foldl (\w' . \pid .
            setPaperReviewers w' pid (bind
                                        (getPaperReviewers w' pid) (\l .
                                          return (insertIf (elem pid pids)
                                                    reviewer (remove reviewer
                                                                l))))) w allPids

(Goals: 10)
(Measures: 4)
(Policy size: fromList [("../paperWrites/Prelude.sq",46),("../paperWrites/Tagged.sq",108),("Conference.sq",345),("ConferenceRepair.sq",0)])
Goal                  &     Templ  &  Solution  &   Time: Typecheck  &     Repair  &    Recheck  &  Total Synth  \\
registerUser          &        10  &        10  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
usersView             &        20  &        50  &             0.01s  &      0.06s  &      0.01s  &        0.08s  \\
submitForm            &        45  &        45  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
searchForm            &        77  &       171  &             0.04s  &      1.21s  &      0.03s  &        1.29s  \\
paperView             &        53  &       153  &             0.04s  &      1.39s  &      0.03s  &        1.47s  \\
reviewsView           &        57  &       112  &             0.02s  &      0.92s  &      0.01s  &        0.96s  \\
profileViewGet        &        66  &        66  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
profileViewPost       &        17  &        17  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
submitReviewViewPost  &        40  &        40  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
assignReviewersView   &        47  &        47  &             0.00s  &      0.00s  &      0.00s  &        0.00s  \\
Totals                &       432  &       711  &             0.14s  &      3.59s  &      0.10s  &        3.84s  \\
