data RecordId
data Record

predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

predicate author :: Record -> User
getAuthor :: r:Record -> Tagged {User | _v == author r} <{True}>

predicate isPatient :: World -> User -> Bool
getIsPatient :: w:World -> u:User -> Tagged {Bool | _v == isPatient w u} <{True}>

predicate isDoctor :: World -> User -> Bool
getIsDoctor :: w:World -> u:User -> Tagged {Bool | _v == isDoctor w u} <{True}>

predicate isPsychiatrist :: World -> User -> Bool
getIsPsychiatrist :: w:World -> u:User -> Tagged {Bool | _v == isPsychiatrist w u} <{True}>

predicate shouldWithhold :: User -> Record -> Bool
getShouldWithhold :: u:User -> r:Record -> Tagged {Bool | _v == shouldWithhold u r} <{True}>

predicate patient :: Record -> User
getPatient :: r:Record -> Tagged {User | _v == patient r} <{True}>

predicate isTreating :: User -> User -> Bool
getIsTreating :: u:User -> w:User -> Tagged {Bool | _v == isTreating u w} <{isPsychiatrist _0 _1 && _1 == u}>

predicate isPsychiatricRecord :: Record -> Bool
getIsPsychiatricRecord :: r:Record -> Tagged {Bool | _v == isPsychiatricRecord r} <{True}>

qualifier { _1 == author (record x y) }
qualifier { isPatient x y }
qualifier { _1 == patient (record x y) }
qualifier { !(shouldWithhold _1 (record x y)) }
qualifier { isDoctor x y }
qualifier { isPsychiatrist x y }
qualifier { isTreating _1 (patient (record x y)) }
qualifier { isPsychiatricRecord (record x y) }

qualifier { _v == (x == author (record y z)) }
qualifier { sessionUser x == author (record x y) }
qualifier { _v == (x == patient y) }
qualifier { x == patient y }
qualifier { _v == (shouldWithhold x (record y z)) }
qualifier { _v == !(shouldWithhold x (record y z)) }
qualifier { _v == !(shouldWithhold x y) }
qualifier { _v == isTreating x y }
qualifier { _v == isTreating x (patient y) }
qualifier { _v == isPsychiatricRecord x }

predicate record :: World -> RecordId -> Record

getRecord :: w:World -> rid:RecordId -> Tagged {Record | _v == record w rid} <{
  _1 == author (record _0 rid) ||
  (isPatient _0 _1 && _1 == patient (record _0 rid) && !(shouldWithhold _1 (record _0 rid))) ||
  (isDoctor _0 _1 && !(shouldWithhold _1 (record _0 rid))) ||
  (isPsychiatrist _0 _1 && isTreating _1 (patient (record _0 rid)) && isPsychiatricRecord (record _0 rid) && !(shouldWithhold _1 (record _0 rid)))
}>

defaultRecord :: Tagged Record <{True}>

getAllRecordIds :: World -> List RecordId

getAuthoredRecordIds :: w:World -> u:User -> List {RecordId | u == author (record w _v)}

setRecord :: w:World -> rid:RecordId -> Tagged Record <{
  _1 == author (record _0 rid) ||
  (isPatient _0 _1 && _1 == patient (record _0 rid) && !(shouldWithhold _1 (record _0 rid))) ||
  (isDoctor _0 _1 && !(shouldWithhold _1 (record _0 rid))) ||
  (isPsychiatrist _0 _1 && isTreating _1 (patient (record _0 rid)) && isPsychiatricRecord (record _0 rid) && !(shouldWithhold _1 (record _0 rid)))
}> -> {World | sessionUser _v == sessionUser w}

getPsychiatristPatients :: u:User -> Tagged (List User) <{isPsychiatrist _0 _1 && _1 == u}>
getDoctorPatients :: u:User -> Tagged (List User) <{isDoctor _0 _1 && _1 == u}>

defaultPsychiatristPatients :: Tagged (List User) <{True}>
defaultPsychiatristPatients = return Nil

defaultDoctorPatients :: Tagged (List User) <{True}>
defaultDoctorPatients = return Nil

showRecordByIdView :: w:World -> rid:RecordId -> World
showRecordByIdView = \w . \rid .
	let u = getSessionUser w in
  let record = getRecord w rid in
  print w u (liftM show record)

showRecordsForPatientView :: w:World -> p:User -> World
showRecordsForPatientView = \w . \patientToSearchFor .
	let sessionUser = getSessionUser w in
  let recordIds = getAllRecordIds w in
  let records = sequence (map (\rid . getRecord w rid) recordIds) in
  let recordsForPatient = bind records (filterM (\record . (bind (getPatient record) (\x . return (x == patientToSearchFor))))) in
  print w sessionUser (liftM show recordsForPatient)

-- no repair is needed here, because from getAuthoredRecordIds's type
-- you can tell that they are already ok
showAuthoredRecordsView :: w:World -> World
showAuthoredRecordsView = \w .
	let sessionUser = getSessionUser w in
	let recordIds = bind sessionUser (\user . return (getAuthoredRecordIds w user)) in
	let records = bind recordIds (\rids . (mapM (\rid . getRecord w rid) rids)) in
	print w sessionUser (liftM show records)

updateRecordForm :: w:World -> rid:RecordId -> record:Record -> World
updateRecordForm = \w . \rid . \record .
  let w' = setRecord w rid (return record) in
  let newRecord = getRecord w' rid in
	let u = getSessionUser w' in
  print w' u (liftM show newRecord)

concat :: List User -> List User -> List User

-- get the list of patients for a doctor or psychiatrist
listOfPatientsView :: w:World -> World
listOfPatientsView = \w .
	let sessionUser = getSessionUser w in
	let patients1 = bind sessionUser (\u . getPsychiatristPatients u) in
	let patients2 = bind sessionUser (\u . getDoctorPatients u) in
	let patients = bind patients1 (\p1 . bind patients2 (\p2 . return (concat p1 p2))) in
	print w sessionUser (liftM show patients)
