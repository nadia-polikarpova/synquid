{-
  This example demonstrates repair inside auxiliary functions
-}

{- Datatypes -}

data PaperId

type Phase = {Int | 0 <= _v && _v < 4}
submission :: {Phase | _v == 0}
review :: {Phase | _v == 1}
rebuttal :: {Phase | _v == 2}
done :: {Phase | _v == 3}

{- Sensitive data and policies -}
   
-- | Current session user
predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

-- | PC chair (public)
predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

getAllPaperIds :: w: World -> Tagged (List PaperId) <{True}>

-- | Current phase
predicate currentPhase :: World -> Int
getCurrentPhase :: w: World -> Tagged {Int | _v == currentPhase w} <{True}>

-- | Paper title (public)
getPaperTitle :: w: World -> pid: PaperId -> Tagged String <{True}>

-- | Paper authors (visible only to the chair unless the phase is rebuttal or later)
getPaperAuthors :: w: World -> pid: PaperId -> Tagged (List User) <{_0 == chair w || currentPhase w >= rebuttal}>
defaultPaperAuthors :: List User

{- Client code -}
  
-- | Search papers by author
-- | Repair: inside isAuthor, check that u is chair or current phase is >= rebuttal
searchByAuthor :: w: World -> a: User -> World
searchByAuthor = \w . \a .
  let u = getSessionUser w in
  let isAuthor = \pid . liftM (elem a) (getPaperAuthors w pid) in -- Is a one of the authors of paper pid?                
  let out = do
              pids <- getAllPaperIds w
              myPids <- filterM isAuthor pids -- a's paper IDs
              myTitles <- mapM (getPaperTitle w) myPids -- a's paper titles
              foldM (\x . \y . return (strcat x y)) emptyString myTitles -- concatenate them together 
            in
  print w u out
  
-- | Repaired version:  
-- searchByAuthor = \w . \a .
  -- let u = getSessionUser w in
    -- let isAuthor = \pid . bind (ifM
                                  -- (liftM2 eq u (getChair w))
                                  -- (getPaperAuthors w pid) 
                                  -- (ifM (bind (getCurrentPhase w) (\x9 . return (leq rebuttal x9)))
                                       -- (getPaperAuthors w pid)
                                       -- defaultPaperAuthors))
                            -- (\auths . return (elem a auths)) in
  -- let aPids = bind (getAllPaperIds w) (\pids . filterM isAuthor pids) in -- a's paper IDs
  -- let titles = bind aPids (\pids . mapM (\pid . getPaperTitle w pid) pids) in -- a's paper titles
  -- let out = bind titles (\xs . foldM (\x . \y . return (strcat x y)) emptyString xs) in -- concatenate them together
  -- print w u out
  
