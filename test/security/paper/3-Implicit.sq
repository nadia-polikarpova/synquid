{-
  This example demonstrates implicit flow: information about paper status is not printed directly,
  but revealed by influencing another value.
  Modeled after a real-world leak in the EDAS conference management system.
-}

{- Datatypes -}

data PaperId

type Phase = {Int | 0 <= _v && _v < 4}
submission :: {Phase | _v == 0}
review :: {Phase | _v == 1}
rebuttal :: {Phase | _v == 2}
done :: {Phase | _v == 3}

{- Sensitive data and policies -}
   
-- | Current session user
predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

-- | PC chair (public)
predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

-- | Current phase
predicate currentPhase :: World -> Int
getCurrentPhase :: w: World -> Tagged {Int | _v == currentPhase w} <{True}>

-- | Paper title (public)
getPaperTitle :: w: World -> pid: PaperId -> Tagged String <{True}>

getPaperStatus :: w: World -> pid: PaperId -> Tagged Bool <{currentPhase w == done}>
defaultPaperStatus :: Tagged Bool <{True}>

{- Client code -}
  
-- | Show session info to session user
-- | Repair: for getPaperStatus, check that phase is done
showSession :: w: World -> pid: PaperId -> World
showSession = \w . \pid .
  let u = getSessionUser w in
  let out = do st <- getPaperStatus w pid
               if st then getPaperTitle w pid else return emptyString
  in print w u out

-- | Repaired version:  
-- showSession = \w . \pid .
  -- let u = getSessionUser w in
  -- let out = bind (ifM (bind (getCurrentPhase w) (\x3 . return (eq done x3)))
                      -- (getPaperStatus w pid)
                      -- defaultPaperStatus) 
              -- (\st . if st then getPaperTitle w pid else return emptyString) in
  -- print w u out
  
