{-
  In this example we assume that all users are either PC members or chair,
  and only chair can see paper authors
-}

{- Datatypes -}

data PaperId

type Phase = {Int | 0 <= _v && _v < 4}
submission :: {Phase | _v == 0}
review :: {Phase | _v == 1}
rebuttal :: {Phase | _v == 2}
done :: {Phase | _v == 3}

{- Sensitive data and policies -}
   
-- | Current session user
predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

-- | PC chair (public)
predicate chair :: World -> User
getChair :: w: World -> Tagged {User | _v == chair w} <{True}>

getAllPaperIds :: w: World -> Tagged (List PaperId) <{True}>

-- | Current phase
predicate currentPhase :: World -> Int
getCurrentPhase :: w: World -> Tagged {Int | _v == currentPhase w} <{True}>

-- | Paper title (public)
getPaperTitle :: w: World -> pid: PaperId -> Tagged String <{True}>

-- | Paper conflicts (public)
predicate paperConflicts :: World -> PaperId -> Set User
getPaperConflicts :: w: World -> pid: PaperId 
                        -> Tagged {List {User | _v in paperConflicts w pid} | elems _v == paperConflicts w pid} <{True}>

-- | Paper score
getPaperScore :: w: World -> pid: PaperId -> Tagged Int <{!(_0 in paperConflicts w pid)}>
defaultPaperScore :: Tagged Int <{True}>

{- Client code -}
  
-- | Sort papers by their score.
-- | Repair: inside cmpScore, check that u is not conflicted with pid1/2
sortPapersByScore :: w: World -> World
sortPapersByScore = \w .
  let u = getSessionUser w in
  let cmpScore = \pid1. \pid2.
    bind (getPaperScore w pid1) (\x1.
      bind (getPaperScore w pid2) (\x2. return (x1 <= x2))) in
  let pids = bind (getAllPaperIds w) (\pids . sortByM cmpScore pids) in -- sorted paper IDs
  let out = liftM show pids in
  --let titles = bind aPids (\pids . mapM (\pid . getPaperTitle w pid) pids) in -- a's paper titles
  --let out = bind titles (\xs . foldM (\x . \y . return (strcat x y)) emptyString xs) in -- concatenate them together
  print w u out
