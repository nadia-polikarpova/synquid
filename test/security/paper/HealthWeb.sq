data RecordId
data Record

predicate sessionUser :: World -> User      
getSessionUser :: w: World -> Tagged {User | _v == sessionUser w} <{True}>

predicate author :: Record -> User
getAuthor :: r:Record -> Tagged {User | _v == author r} <{True}>

predicate isPatient :: World -> User -> Bool
getIsPatient :: w:World -> u:User -> Tagged {Bool | _v == isPatient w u} <{True}>

predicate isDoctor :: World -> User -> Bool
getIsDoctor :: w:World -> u:User -> Tagged {Bool | _v == isDoctor w u} <{True}>

predicate isPsychiatrist :: World -> User -> Bool
getIsPsychiatrist :: w:World -> u:User -> Tagged {Bool | _v == isPsychiatrist w u} <{True}>

predicate shouldWithhold :: User -> Record -> Bool
getShouldWithhold :: u:User -> r:Record -> Tagged {Bool | _v == shouldWithhold u r} <{True}>

predicate patient :: Record -> User
getPatient :: r:Record -> Tagged {User | _v == patient r} <{True}>

predicate isTreating :: User -> User -> Bool
getIsTreating :: u:User -> w:User -> Tagged {Bool | _v == isTreating u w} <{True}>

predicate isPsychiatricRecord :: Record -> Bool
getIsPsychiatricRecord :: r:Record -> Tagged {Bool | _v == isPsychiatricRecord r} <{True}>

qualifier { _0 == author (record x y) }
qualifier { isPatient x y }
qualifier { _0 == patient (record x y) }
qualifier { !(shouldWithhold _0 (record x y)) }
qualifier { isDoctor x y }
qualifier { isPsychiatrist x y }
qualifier { isTreating _0 (patient (record x y)) }
qualifier { isPsychiatricRecord (record x y) }

qualifier { _v == (x == author (record y z)) }
qualifier { sessionUser x == author (record x y) }
qualifier { _v == (x == patient y) }
qualifier { x == patient y }
qualifier { _v == (shouldWithhold x (record y z)) }
qualifier { _v == !(shouldWithhold x (record y z)) }
qualifier { _v == !(shouldWithhold x y) }
qualifier { _v == isTreating x y }
qualifier { _v == isTreating x (patient y) }
qualifier { _v == isPsychiatricRecord x }

predicate record :: World -> RecordId -> Record

getRecord :: w:World -> rid:RecordId -> Tagged {Record | _v == record w rid} <{
  _0 == author (record w rid) ||
  (isPatient w _0 && _0 == patient (record w rid) && !(shouldWithhold _0 (record w rid))) ||
  (isDoctor w _0 && !(shouldWithhold _0 (record w rid))) ||
  (isPsychiatrist w _0 && isTreating _0 (patient (record w rid)) && isPsychiatricRecord (record w rid) && !(shouldWithhold _0 (record w rid)))
}>

defaultRecord :: Tagged Record <{True}>

getAllRecordIds :: World -> List RecordId

showRecord :: w:World -> rid:RecordId -> World
showRecord = \w . \rid .
	let u = getSessionUser w in
  let record = getRecord w rid in
  print w u record

showRecordForPatient :: w:World -> p:User -> World
showRecordForPatient = \w . \patientToSearchFor .
	let sessionUser = getSessionUser w in
  let recordIds = getAllRecordIds w in
  let records = sequence (map (\rid . getRecord w rid) recordIds) in
  let recordsForPatient = bind records (filterM (\record . (bind (getPatient record) (\x . return (x == patientToSearchFor))))) in
  print w sessionUser recordsForPatient
