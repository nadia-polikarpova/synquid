data BDD <p :: Int -> Bool> where
  Leaf :: v: Bool -> BDD <p>
  Node :: var: {Int | p _v} -> f: BDD <{p _0 && var < _0}> -> t: BDD <{p _0 && var < _0}> -> BDD <p>
  
termination measure size :: BDD -> {Int | _v > 0} where
  Leaf v -> 1
  Node var f t -> 1 + size f + size t
  
predicate store :: Int -> Bool  

measure eval :: BDD -> Bool where
  Leaf v -> v
  Node var f t -> if store var then eval t else eval f
  
true :: {Bool | _v}  
false :: {Bool | !_v}  
qualifier {x}  

not :: <p :: Int -> Bool> . d: BDD <p> -> {BDD <p> | eval _v <==> !(eval d)}
not = ??
    
    
    
  